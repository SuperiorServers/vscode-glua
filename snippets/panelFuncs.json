{
  "ContentIcon:GetColor": {
    "prefix": "GetColor",
    "body": "GetColor()$0",
    "description": "(Client) Method: ContentIcon:GetColor\n\nReturns the color set by ContentIcon.SetColor"
  },
  "ContentIcon:GetContentType": {
    "prefix": "GetContentType",
    "body": "GetContentType()$0",
    "description": "(Client) Method: ContentIcon:GetContentType\n\nReturns the content type used to save and restore the content icon in a spawnlist."
  },
  "ContentIcon:GetNPCWeapon": {
    "prefix": "GetNPCWeapon",
    "body": "GetNPCWeapon()$0",
    "description": "(Client) Method: ContentIcon:GetNPCWeapon\n\nReturns a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC."
  },
  "ContentIcon:GetSpawnName": {
    "prefix": "GetSpawnName",
    "body": "GetSpawnName()$0",
    "description": "(Client) Method: ContentIcon:GetSpawnName\n\nReturns the internal \"name\" for the content icon, usually a class name for an entity."
  },
  "ContentIcon:OpenMenu": {
    "prefix": "OpenMenu",
    "body": "OpenMenu()$0",
    "description": "(Client) Method: ContentIcon:OpenMenu\n\nA hook for override, by default does nothing. Called when user right clicks on the content icon, you are supposed to open a _G.DermaMenu here with additional options."
  },
  "ContentIcon:SetAdminOnly": {
    "prefix": "SetAdminOnly",
    "body": "SetAdminOnly(${1:boolean adminOnly})$0",
    "description": "(Client) Method: ContentIcon:SetAdminOnly\n\nSets whether the content item is admin only. This makes the icon to display a admin icon in the top left corner of the icon."
  },
  "ContentIcon:SetColor": {
    "prefix": "SetColor",
    "body": "SetColor(${1:table clr})$0",
    "description": "(Client) Method: ContentIcon:SetColor\n\nSets the color for the content icon. Currently is not used by the content icon panel."
  },
  "ContentIcon:SetContentType": {
    "prefix": "SetContentType",
    "body": "SetContentType(${1:string type})$0",
    "description": "(Client) Method: ContentIcon:SetContentType\n\nSets the content type used to save and restore the content icon in a spawnlist."
  },
  "ContentIcon:SetMaterial": {
    "prefix": "SetMaterial",
    "body": "SetMaterial(${1:string path})$0",
    "description": "(Client) Method: ContentIcon:SetMaterial\n\nSets the material to be displayed as the content icon."
  },
  "ContentIcon:SetName": {
    "prefix": "SetName",
    "body": "SetName(${1:string name})$0",
    "description": "(Client) Method: ContentIcon:SetName\n\nSets the tool tip and the \"nice\" name to be displayed by the content icon."
  },
  "ContentIcon:SetNPCWeapon": {
    "prefix": "SetNPCWeapon",
    "body": "SetNPCWeapon(${1:table weapons})$0",
    "description": "(Client) Method: ContentIcon:SetNPCWeapon\n\nSets a table of weapon classes for the content icon with \"NPC\" content type to be randomly chosen from when user tries to spawn the NPC."
  },
  "ContentIcon:SetSpawnName": {
    "prefix": "SetSpawnName",
    "body": "SetSpawnName(${1:string name})$0",
    "description": "(Client) Method: ContentIcon:SetSpawnName\n\nSets the internal \"name\" for the content icon, usually a class name for an entity."
  },
  "ContextBase:ControlValues": {
    "prefix": "ControlValues",
    "body": "ControlValues(${1:table contextData})$0",
    "description": "(Client) Method: ContextBase:ControlValues\n\nCalled by spawnmenu functions (when creating a context menu) to fill this control with data."
  },
  "ContextBase:ConVar": {
    "prefix": "ConVar",
    "body": "ConVar()$0",
    "description": "(Client) Method: ContextBase:ConVar\n\nReturns the ConVar for the panel to change/handle, set by ContextBase.SetConVar"
  },
  "ContextBase:SetConVar": {
    "prefix": "SetConVar",
    "body": "SetConVar(${1:string cvar})$0",
    "description": "(Client) Method: ContextBase:SetConVar\n\nSets the ConVar for the panel to change/handle."
  },
  "ContextBase:TestForChanges": {
    "prefix": "TestForChanges",
    "body": "TestForChanges()$0",
    "description": "(Client) Method: ContextBase:TestForChanges\n\nYou should override this function and use it to check whether your convar value changed."
  },
  "ControlPanel:AddControl": {
    "prefix": "AddControl",
    "body": "AddControl(${1:string type}, ${2:table controlinfo})$0",
    "description": "(Client) Method: ControlPanel:AddControl\n\n[Deprecated] .It is recommended to use DForm's members instead."
  },
  "ControlPresets:AddConVar": {
    "prefix": "AddConVar",
    "body": "AddConVar(${1:string convar})$0",
    "description": "(Client) Method: ControlPresets:AddConVar\n\nAdds a convar to be managed by this control."
  },
  "ControlPresets:GetConVars": {
    "prefix": "GetConVars",
    "body": "GetConVars()$0",
    "description": "(Client) Method: ControlPresets:GetConVars\n\nGet a list of all Console Variables being managed by this panel."
  },
  "ControlPresets:SetLabel": {
    "prefix": "SetLabel",
    "body": "SetLabel(${1:string name})$0",
    "description": "(Client) Method: ControlPresets:SetLabel\n\nSet the name label text."
  },
  "DAdjustableModelPanel:CaptureMouse": {
    "prefix": "CaptureMouse",
    "body": "CaptureMouse()$0",
    "description": "(Client) Method: DAdjustableModelPanel:CaptureMouse\n\n[Internal]  Used by the panel to perform mouse capture operations when adjusting the model."
  },
  "DAdjustableModelPanel:FirstPersonControls": {
    "prefix": "FirstPersonControls",
    "body": "FirstPersonControls()$0",
    "description": "(Client) Method: DAdjustableModelPanel:FirstPersonControls\n\n[Internal]  Used to adjust the perspective in the model panel via the keyboard, when the right mouse button is used."
  },
  "DAdjustableModelPanel:GetFirstPerson": {
    "prefix": "GetFirstPerson",
    "body": "GetFirstPerson()$0",
    "description": "(Client) Method: DAdjustableModelPanel:GetFirstPerson\n\nGets whether mouse and keyboard-based adjustment of the perspective has been enabled. See DAdjustableModelPanel.SetFirstPerson for more information."
  },
  "DAdjustableModelPanel:SetFirstPerson": {
    "prefix": "SetFirstPerson",
    "body": "SetFirstPerson(${1:boolean enable})$0",
    "description": "(Client) Method: DAdjustableModelPanel:SetFirstPerson\n\nEnables mouse and keyboard-based adjustment of the perspective."
  },
  "DAlphaBar:GetBarColor": {
    "prefix": "GetBarColor",
    "body": "GetBarColor()$0",
    "description": "(Client) Method: DAlphaBar:GetBarColor\n\nReturns the base color of the alpha bar. This is the color for which the alpha channel is being modified."
  },
  "DAlphaBar:GetValue": {
    "prefix": "GetValue",
    "body": "GetValue()$0",
    "description": "(Client) Method: DAlphaBar:GetValue\n\nReturns the alpha value of the alpha bar."
  },
  "DAlphaBar:OnChange": {
    "prefix": "OnChange",
    "body": "OnChange(${1:number alpha})$0",
    "description": "(Client) Method: DAlphaBar:OnChange\n\nCalled when user changes the desired alpha value with the control."
  },
  "DAlphaBar:SetBarColor": {
    "prefix": "SetBarColor",
    "body": "SetBarColor(${1:table clr})$0",
    "description": "(Client) Method: DAlphaBar:SetBarColor\n\nSets the base color of the alpha bar. This is the color for which the alpha channel is being modified. "
  },
  "DAlphaBar:SetValue": {
    "prefix": "SetValue",
    "body": "SetValue(${1:number alpha})$0",
    "description": "(Client) Method: DAlphaBar:SetValue\n\nSets the alpha value or the alpha bar."
  },
  "DBinder:GetSelectedNumber": {
    "prefix": "GetSelectedNumber",
    "body": "GetSelectedNumber()$0",
    "description": "(Client) Method: DBinder:GetSelectedNumber\n\nGets the code of the key currently bound by the DBinder. Same as DBinder.GetValue."
  },
  "DBinder:GetValue": {
    "prefix": "GetValue",
    "body": "GetValue()$0",
    "description": "(Client) Method: DBinder:GetValue\n\nGets the code of the key currently bound by the DBinder. Same as DBinder.GetSelectedNumber."
  },
  "DBinder:SetSelected": {
    "prefix": "SetSelected",
    "body": "SetSelected(${1:number keyCode})$0",
    "description": "(Client) Method: DBinder:SetSelected\n\nSets the current key bound by the DBinder, and updates the button's text."
  },
  "DBinder:SetSelectedNumber": {
    "prefix": "SetSelectedNumber",
    "body": "SetSelectedNumber(${1:number keyCode})$0",
    "description": "(Client) Method: DBinder:SetSelectedNumber\n\n[Internal]  Sets the internal variable for the keycode only. To update the text and ConVar, you should use DBinder.SetSelected."
  },
  "DBinder:SetValue": {
    "prefix": "SetValue",
    "body": "SetValue(${1:number keyCode})$0",
    "description": "(Client) Method: DBinder:SetValue\n\nAlias of DBinder.SetSelected."
  },
  "DBinder:UpdateText": {
    "prefix": "UpdateText",
    "body": "UpdateText()$0",
    "description": "(Client) Method: DBinder:UpdateText\n\n[Internal]  Used to set the text of the DBinder to the current key binding, or ''NONE''."
  },
  "DBubbleContainer:OpenForPos": {
    "prefix": "OpenForPos",
    "body": "OpenForPos(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})$0",
    "description": "(Client) Method: DBubbleContainer:OpenForPos\n\nSets the speech bubble position and size along with the dialog point position."
  },
  "DButton:GetDrawBorder": {
    "prefix": "GetDrawBorder",
    "body": "GetDrawBorder()$0",
    "description": "(Client) Method: DButton:GetDrawBorder\n\n[Deprecated] "
  },
  "DButton:IsDown": {
    "prefix": "IsDown",
    "body": "IsDown()$0",
    "description": "(Client) Method: DButton:IsDown\n\nReturns true if the DButton is currently depressed (a user is clicking on it)."
  },
  "DButton:SetConsoleCommand": {
    "prefix": "SetConsoleCommand",
    "body": "SetConsoleCommand(${1:string command}, ${2:string args})$0",
    "description": "(Client) Method: DButton:SetConsoleCommand\n\nSets a console command to be called when the button is clicked."
  },
  "DButton:SetDisabled": {
    "prefix": "SetDisabled",
    "body": "SetDisabled(${1:boolean disable})$0",
    "description": "(Client) Method: DButton:SetDisabled\n\n[Deprecated] .Use DButton.SetEnabled insteadSets whether or not the DButton is disabled."
  },
  "DButton:SetDrawBorder": {
    "prefix": "SetDrawBorder",
    "body": "SetDrawBorder(${1:boolean draw})$0",
    "description": "(Client) Method: DButton:SetDrawBorder\n\n[Deprecated] "
  },
  "DButton:SetEnabled": {
    "prefix": "SetEnabled",
    "body": "SetEnabled(${1:boolean enable})$0",
    "description": "(Client) Method: DButton:SetEnabled\n\nSets whether or not the DButton is enabled."
  },
  "DButton:SetImage": {
    "prefix": "SetImage",
    "body": "SetImage(${1:string img=nil})$0",
    "description": "(Client) Method: DButton:SetImage\n\nSets an image to be displayed as the button's background."
  },
  "DButton:UpdateColors": {
    "prefix": "UpdateColors",
    "body": "UpdateColors(${1:table skin})$0",
    "description": "(Client) Method: DButton:UpdateColors\n\nA hook called from within DLabel's PANEL.ApplySchemeSettings to determine the color of the text on display."
  },
  "DCategoryList:Add": {
    "prefix": "Add",
    "body": "Add(${1:string categoryName})$0",
    "description": "(Client) Method: DCategoryList:Add\n\nAdds a DCollapsibleCategory to the list."
  },
  "DCategoryList:AddItem": {
    "prefix": "AddItem",
    "body": "AddItem(${1:Panel element})$0",
    "description": "(Client) Method: DCategoryList:AddItem\n\nAdds an element to the list."
  },
  "DCategoryList:UnselectAll": {
    "prefix": "UnselectAll",
    "body": "UnselectAll()$0",
    "description": "(Client) Method: DCategoryList:UnselectAll\n\nCalls Panel.UnselectAll on all child elements, if they have it."
  },
  "DCheckBox:DoClick": {
    "prefix": "DoClick",
    "body": "DoClick()$0",
    "description": "(Client) Method: DCheckBox:DoClick\n\nCalled when the checkbox is clicked by a user. If you are overriding this, you must call DCheckBox.Toggle, else the checkbox will not respond to user clicks."
  },
  "DCheckBox:GetChecked": {
    "prefix": "GetChecked",
    "body": "GetChecked()$0",
    "description": "(Client) Method: DCheckBox:GetChecked\n\nGets the checked state of the checkbox."
  },
  "DCheckBox:IsEditing": {
    "prefix": "IsEditing",
    "body": "IsEditing()$0",
    "description": "(Client) Method: DCheckBox:IsEditing\n\nReturns whether the state of the checkbox is being edited. This means whether the user is currently clicking (mouse-down) on the checkbox, and applies to both the left and right mouse buttons."
  },
  "DCheckBox:OnChange": {
    "prefix": "OnChange",
    "body": "OnChange(${1:boolean bVal})$0",
    "description": "(Client) Method: DCheckBox:OnChange\n\nCalled when the \"checked\" state is changed."
  },
  "DCheckBox:SetChecked": {
    "prefix": "SetChecked",
    "body": "SetChecked(${1:boolean checked})$0",
    "description": "(Client) Method: DCheckBox:SetChecked\n\nSets the checked state of the checkbox. Does not call the checkbox's DCheckBox.OnChange and Panel.ConVarChanged methods, unlike DCheckBox.SetValue."
  },
  "DCheckBox:SetValue": {
    "prefix": "SetValue",
    "body": "SetValue(${1:boolean checked})$0",
    "description": "(Client) Method: DCheckBox:SetValue\n\nSets the checked state of the checkbox, and calls the checkbox's DCheckBox.OnChange and Panel.ConVarChanged methods."
  },
  "DCheckBox:Toggle": {
    "prefix": "Toggle",
    "body": "Toggle()$0",
    "description": "(Client) Method: DCheckBox:Toggle\n\nToggles the checked state of the checkbox, and calls the checkbox's DCheckBox.OnChange and Panel.ConVarChanged methods. This is called by DCheckBox.DoClick."
  },
  "DCheckBoxLabel:GetChecked": {
    "prefix": "GetChecked",
    "body": "GetChecked()$0",
    "description": "(Client) Method: DCheckBoxLabel:GetChecked\n\nGets the checked state of the checkbox. This calls the checkbox's DCheckBox.GetChecked function."
  },
  "DCheckBoxLabel:OnChange": {
    "prefix": "OnChange",
    "body": "OnChange(${1:boolean bVal})$0",
    "description": "(Client) Method: DCheckBoxLabel:OnChange\n\nCalled when the \"checked\" state is changed."
  },
  "DCheckBoxLabel:SetBright": {
    "prefix": "SetBright",
    "body": "SetBright(${1:boolean bright})$0",
    "description": "(Client) Method: DCheckBoxLabel:SetBright\n\nSets the color of the DCheckBoxLabel's text to the bright text color defined in the skin."
  },
  "DCheckBoxLabel:SetChecked": {
    "prefix": "SetChecked",
    "body": "SetChecked(${1:boolean checked})$0",
    "description": "(Client) Method: DCheckBoxLabel:SetChecked\n\nSets the checked state of the checkbox. Does not call DCheckBoxLabel.OnChange or Panel.ConVarChanged, unlike DCheckBoxLabel.SetValue."
  },
  "DCheckBoxLabel:SetText": {
    "prefix": "SetText",
    "body": "SetText(${1:string text})$0",
    "description": "(Client) Method: DCheckBoxLabel:SetText\n\nSet the Text of the DCheckBoxLabel VGUI element."
  },
  "DCheckBoxLabel:SetTextColor": {
    "prefix": "SetTextColor",
    "body": "SetTextColor(${1:table color})$0",
    "description": "(Client) Method: DCheckBoxLabel:SetTextColor\n\nSets the text color for the DCheckBoxLabel."
  },
  "DCheckBoxLabel:SetValue": {
    "prefix": "SetValue",
    "body": "SetValue(${1:boolean checked})$0",
    "description": "(Client) Method: DCheckBoxLabel:SetValue\n\nSets the checked state of the checkbox, and calls DCheckBoxLabel.OnChange and the checkbox's Panel.ConVarChanged methods."
  },
  "DCollapsibleCategory:GetExpanded": {
    "prefix": "GetExpanded",
    "body": "GetExpanded()$0",
    "description": "(Client) Method: DCollapsibleCategory:GetExpanded\n\nReturns whether the DCollapsibleCategory is expanded or not."
  },
  "DCollapsibleCategory:OnToggle": {
    "prefix": "OnToggle",
    "body": "OnToggle()$0",
    "description": "(Client) Method: DCollapsibleCategory:OnToggle\n\nCalled by DCollapsibleCategory.Toggle."
  },
  "DCollapsibleCategory:SetAnimTime": {
    "prefix": "SetAnimTime",
    "body": "SetAnimTime(${1:number time})$0",
    "description": "(Client) Method: DCollapsibleCategory:SetAnimTime\n\nSets the time in seconds it takes to expand the DCollapsibleCategory"
  },
  "DCollapsibleCategory:SetContents": {
    "prefix": "SetContents",
    "body": "SetContents(${1:Panel pnl})$0",
    "description": "(Client) Method: DCollapsibleCategory:SetContents\n\nSets the contents of the DCollapsibleCategory."
  },
  "DCollapsibleCategory:SetExpanded": {
    "prefix": "SetExpanded",
    "body": "SetExpanded(${1:boolean expanded=true})$0",
    "description": "(Client) Method: DCollapsibleCategory:SetExpanded\n\nSets whether the DCollapsibleCategory is expanded or not upon opening the container"
  },
  "DCollapsibleCategory:SetLabel": {
    "prefix": "SetLabel",
    "body": "SetLabel(${1:string label})$0",
    "description": "(Client) Method: DCollapsibleCategory:SetLabel\n\nSets the name of the DCollapsibleCategory."
  },
  "DCollapsibleCategory:Toggle": {
    "prefix": "Toggle",
    "body": "Toggle()$0",
    "description": "(Client) Method: DCollapsibleCategory:Toggle\n\nToggles the expanded state of the DCollapsibleCategory."
  },
  "DColorCube:GetRGB": {
    "prefix": "GetRGB",
    "body": "GetRGB()$0",
    "description": "(Client) Method: DColorCube:GetRGB\n\nReturns the color cube's current set color."
  },
  "DColorCube:OnUserChanged": {
    "prefix": "OnUserChanged",
    "body": "OnUserChanged(${1:table color})$0",
    "description": "(Client) Method: DColorCube:OnUserChanged\n\nFunction which is called when the color cube slider is moved (through user input). Meant to be overridden."
  },
  "DColorCube:SetBaseRGB": {
    "prefix": "SetBaseRGB",
    "body": "SetBaseRGB(${1:table color})$0",
    "description": "(Client) Method: DColorCube:SetBaseRGB\n\nSets the base color and the color used to draw the color cube panel itself."
  },
  "DColorCube:SetColor": {
    "prefix": "SetColor",
    "body": "SetColor(${1:table color})$0",
    "description": "(Client) Method: DColorCube:SetColor\n\nSets the base color of the color cube and updates the slider position."
  },
  "DColorCube:TranslateValues": {
    "prefix": "TranslateValues",
    "body": "TranslateValues(${1:number x}, ${2:number y})$0",
    "description": "(Client) Method: DColorCube:TranslateValues\n\nUpdates the color cube RGB based on the given x and y position and returns its arguments. Similar to DColorCube.UpdateColor."
  },
  "DColorCube:UpdateColor": {
    "prefix": "UpdateColor",
    "body": "UpdateColor(${1:number x}, ${2:number y})$0",
    "description": "(Client) Method: DColorCube:UpdateColor\n\nUpdates the color cube RGB based on the given x and y position. Similar to DColorCube.TranslateValues."
  },
  "DColorMixer:GetAlphaBar": {
    "prefix": "GetAlphaBar",
    "body": "GetAlphaBar()$0",
    "description": "(Client) Method: DColorMixer:GetAlphaBar\n\nReturn true if alpha bar is shown, false if not."
  },
  "DColorMixer:GetColor": {
    "prefix": "GetColor",
    "body": "GetColor()$0",
    "description": "(Client) Method: DColorMixer:GetColor\n\nReturns the current selected color."
  },
  "DColorMixer:GetPalette": {
    "prefix": "GetPalette",
    "body": "GetPalette()$0",
    "description": "(Client) Method: DColorMixer:GetPalette\n\nReturn true if palette is shown, false if not."
  },
  "DColorMixer:GetWangs": {
    "prefix": "GetWangs",
    "body": "GetWangs()$0",
    "description": "(Client) Method: DColorMixer:GetWangs\n\nReturn true if the wangs are shown, false if not."
  },
  "DColorMixer:SetAlphaBar": {
    "prefix": "SetAlphaBar",
    "body": "SetAlphaBar(${1:boolean show})$0",
    "description": "(Client) Method: DColorMixer:SetAlphaBar\n\nShow/Hide the alpha bar in DColorMixer"
  },
  "DColorMixer:SetColor": {
    "prefix": "SetColor",
    "body": "SetColor(${1:table color})$0",
    "description": "(Client) Method: DColorMixer:SetColor\n\nSets the color of DColorMixer"
  },
  "DColorMixer:SetPalette": {
    "prefix": "SetPalette",
    "body": "SetPalette(${1:boolean enabled})$0",
    "description": "(Client) Method: DColorMixer:SetPalette\n\nShow or hide the palette panel"
  },
  "DColorMixer:SetWangs": {
    "prefix": "SetWangs",
    "body": "SetWangs(${1:boolean show})$0",
    "description": "(Client) Method: DColorMixer:SetWangs\n\nShow / Hide the colors indicators in DColorMixer"
  },
  "DColorPalette:OnValueChanged": {
    "prefix": "OnValueChanged",
    "body": "OnValueChanged(${1:table newcol})$0",
    "description": "(Client) Method: DColorPalette:OnValueChanged\n\nCalled when the color is changed after clicking a new value."
  },
  "DColumnSheet:AddSheet": {
    "prefix": "AddSheet",
    "body": "AddSheet(${1:string name}, ${2:Panel pnl}, ${3:string icon=nil})$0",
    "description": "(Client) Method: DColumnSheet:AddSheet\n\nAdds a new column/tab."
  },
  "DColumnSheet:SetActiveButton": {
    "prefix": "SetActiveButton",
    "body": "SetActiveButton(${1:Panel active})$0",
    "description": "(Client) Method: DColumnSheet:SetActiveButton\n\n[Internal] Makes a button an active button for this DColumnSheet."
  },
  "DColumnSheet:UseButtonOnlyStyle": {
    "prefix": "UseButtonOnlyStyle",
    "body": "UseButtonOnlyStyle()$0",
    "description": "(Client) Method: DColumnSheet:UseButtonOnlyStyle\n\nMakes the tabs/buttons show only the image and no text."
  },
  "DComboBox:AddChoice": {
    "prefix": "AddChoice",
    "body": "AddChoice(${1:string value}, ${2:any data=nil}, ${3:boolean select=false})$0",
    "description": "(Client) Method: DComboBox:AddChoice\n\nAdds a choice to the combo box"
  },
  "DComboBox:ChooseOption": {
    "prefix": "ChooseOption",
    "body": "ChooseOption(${1:string value}, ${2:number index})$0",
    "description": "(Client) Method: DComboBox:ChooseOption\n\nSelects a combo box option by its index and changes the text displayed at the top of the combo box."
  },
  "DComboBox:ChooseOptionID": {
    "prefix": "ChooseOptionID",
    "body": "ChooseOptionID(${1:number index})$0",
    "description": "(Client) Method: DComboBox:ChooseOptionID\n\nSelects an option within a combo box based on its table index."
  },
  "DComboBox:Clear": {
    "prefix": "Clear",
    "body": "Clear()$0",
    "description": "(Client) Method: DComboBox:Clear\n\nClears the combo box's text value, choices, and data values."
  },
  "DComboBox:CloseMenu": {
    "prefix": "CloseMenu",
    "body": "CloseMenu()$0",
    "description": "(Client) Method: DComboBox:CloseMenu\n\nCloses the combo box menu. Called when the combo box is clicked while open."
  },
  "DComboBox:GetOptionData": {
    "prefix": "GetOptionData",
    "body": "GetOptionData(${1:number index})$0",
    "description": "(Client) Method: DComboBox:GetOptionData\n\nReturns an option's data based on the given index."
  },
  "DComboBox:GetOptionText": {
    "prefix": "GetOptionText",
    "body": "GetOptionText(${1:number index})$0",
    "description": "(Client) Method: DComboBox:GetOptionText\n\nReturns an option's text based on the given index."
  },
  "DComboBox:GetSelected": {
    "prefix": "GetSelected",
    "body": "GetSelected()$0",
    "description": "(Client) Method: DComboBox:GetSelected\n\nReturns the currently selected option's text and data"
  },
  "DComboBox:GetSelectedID": {
    "prefix": "GetSelectedID",
    "body": "GetSelectedID()$0",
    "description": "(Client) Method: DComboBox:GetSelectedID\n\nReturns the index (ID) of the currently selected option."
  },
  "DComboBox:IsMenuOpen": {
    "prefix": "IsMenuOpen",
    "body": "IsMenuOpen()$0",
    "description": "(Client) Method: DComboBox:IsMenuOpen\n\nReturns whether or not the combo box's menu is opened."
  },
  "DComboBox:OnSelect": {
    "prefix": "OnSelect",
    "body": "OnSelect(${1:number index}, ${2:string value}, ${3:any data})$0",
    "description": "(Client) Method: DComboBox:OnSelect\n\nInternal function which is called when an option in the combo box is selected. This function does nothing by default and is meant to be overridden in order to make the combo box functional."
  },
  "DComboBox:OpenMenu": {
    "prefix": "OpenMenu",
    "body": "OpenMenu()$0",
    "description": "(Client) Method: DComboBox:OpenMenu\n\nOpens the combo box drop down menu. Called when the combo box is clicked."
  },
  "DComboBox:SetSortItems": {
    "prefix": "SetSortItems",
    "body": "SetSortItems(${1:boolean sort})$0",
    "description": "(Client) Method: DComboBox:SetSortItems\n\nSets whether or not the items should be sorted alphabetically in the dropdown menu of the DComboBox."
  },
  "DComboBox:SetValue": {
    "prefix": "SetValue",
    "body": "SetValue(${1:string value})$0",
    "description": "(Client) Method: DComboBox:SetValue\n\nSets the text shown in the combo box when the menu is not collapsed."
  },
  "DDragBase:GetDnD": {
    "prefix": "GetDnD",
    "body": "GetDnD()$0",
    "description": "(Client) Method: DDragBase:GetDnD\n\n"
  },
  "DDragBase:MakeDroppable": {
    "prefix": "MakeDroppable",
    "body": "MakeDroppable(${1:string name}, ${2:boolean allowCopy})$0",
    "description": "(Client) Method: DDragBase:MakeDroppable\n\nMakes the panel a receiver for any droppable panel with the same DnD name. Internally calls Panel.Receiver."
  },
  "DDragBase:SetDnD": {
    "prefix": "SetDnD",
    "body": "SetDnD(${1:string name})$0",
    "description": "(Client) Method: DDragBase:SetDnD\n\n"
  },
  "DDragBase:SetDropPos": {
    "prefix": "SetDropPos",
    "body": "SetDropPos(${1:string pos=5})$0",
    "description": "(Client) Method: DDragBase:SetDropPos\n\nDetermines where you can drop stuff."
  },
  "DDrawer:GetOpenSize": {
    "prefix": "GetOpenSize",
    "body": "GetOpenSize()$0",
    "description": "(Client) Method: DDrawer:GetOpenSize\n\nReturn the Open Size of DDrawer."
  },
  "DDrawer:GetOpenTime": {
    "prefix": "GetOpenTime",
    "body": "GetOpenTime()$0",
    "description": "(Client) Method: DDrawer:GetOpenTime\n\nReturn the Open Time of DDrawer."
  },
  "DDrawer:SetOpenSize": {
    "prefix": "SetOpenSize",
    "body": "SetOpenSize(${1:number Value})$0",
    "description": "(Client) Method: DDrawer:SetOpenSize\n\nSet the height of DDrawer"
  },
  "DDrawer:SetOpenTime": {
    "prefix": "SetOpenTime",
    "body": "SetOpenTime(${1:number value})$0",
    "description": "(Client) Method: DDrawer:SetOpenTime\n\nSet the time (in seconds) for DDrawer to open."
  },
  "DDrawer:Toggle": {
    "prefix": "Toggle",
    "body": "Toggle()$0",
    "description": "(Client) Method: DDrawer:Toggle\n\nToggle the DDrawer."
  },
  "DFileBrowser:Clear": {
    "prefix": "Clear",
    "body": "Clear()$0",
    "description": "(Client) Method: DFileBrowser:Clear\n\nClears the file tree and list, and resets all values."
  },
  "DFileBrowser:GetBaseFolder": {
    "prefix": "GetBaseFolder",
    "body": "GetBaseFolder()$0",
    "description": "(Client) Method: DFileBrowser:GetBaseFolder\n\nReturns the root directory/folder of the file tree."
  },
  "DFileBrowser:GetCurrentFolder": {
    "prefix": "GetCurrentFolder",
    "body": "GetCurrentFolder()$0",
    "description": "(Client) Method: DFileBrowser:GetCurrentFolder\n\nReturns the current directory/folder being displayed."
  },
  "DFileBrowser:GetFileTypes": {
    "prefix": "GetFileTypes",
    "body": "GetFileTypes()$0",
    "description": "(Client) Method: DFileBrowser:GetFileTypes\n\nReturns the current file type filter on the file list."
  },
  "DFileBrowser:GetFolderNode": {
    "prefix": "GetFolderNode",
    "body": "GetFolderNode()$0",
    "description": "(Client) Method: DFileBrowser:GetFolderNode\n\nReturns the DTree Node that the file tree stems from."
  },
  "DFileBrowser:GetModels": {
    "prefix": "GetModels",
    "body": "GetModels()$0",
    "description": "(Client) Method: DFileBrowser:GetModels\n\nReturns whether or not the model viewer mode is enabled. In this mode, files are displayed as SpawnIcons instead of a list."
  },
  "DFileBrowser:GetName": {
    "prefix": "GetName",
    "body": "GetName()$0",
    "description": "(Client) Method: DFileBrowser:GetName\n\nReturns the name being used for the file tree."
  },
  "DFileBrowser:SetOpen": {
    "prefix": "SetOpen",
    "body": "SetOpen()$0",
    "description": "(Client) Method: DFileBrowser:SetOpen\n\nReturns whether or not the file tree is open."
  },
  "DFileBrowser:SetPath": {
    "prefix": "SetPath",
    "body": "SetPath()$0",
    "description": "(Client) Method: DFileBrowser:SetPath\n\nReturns the access path of the file tree. This is ''GAME'' unless changed with DFileBrowser.SetPath."
  },
  "DFileBrowser:GetSearch": {
    "prefix": "GetSearch",
    "body": "GetSearch()$0",
    "description": "(Client) Method: DFileBrowser:GetSearch\n\nReturns the current search filter on the file tree."
  },
  "DFileBrowser:OnDoubleClick": {
    "prefix": "OnDoubleClick",
    "body": "OnDoubleClick(${1:string filePath}, ${2:Panel selectedPanel})$0",
    "description": "(Client) Method: DFileBrowser:OnDoubleClick\n\nCalled when a file is double-clicked."
  },
  "DFileBrowser:OnRightClick": {
    "prefix": "OnRightClick",
    "body": "OnRightClick(${1:string filePath}, ${2:Panel selectedPanel})$0",
    "description": "(Client) Method: DFileBrowser:OnRightClick\n\nCalled when a file is right-clicked."
  },
  "DFileBrowser:OnSelect": {
    "prefix": "OnSelect",
    "body": "OnSelect(${1:string filePath}, ${2:Panel selectedPanel})$0",
    "description": "(Client) Method: DFileBrowser:OnSelect\n\nCalled when a file is selected."
  },
  "DFileBrowser:SetBaseFolder": {
    "prefix": "SetBaseFolder",
    "body": "SetBaseFolder(${1:string baseDir})$0",
    "description": "(Client) Method: DFileBrowser:SetBaseFolder\n\nSets the root directory/folder of the file tree."
  },
  "DFileBrowser:SetFileTypes": {
    "prefix": "SetFileTypes",
    "body": "SetFileTypes(${1:string fileTypes=\"*.*\"})$0",
    "description": "(Client) Method: DFileBrowser:SetFileTypes\n\nSets the file type filter for the file list."
  },
  "DFileBrowser:SetModels": {
    "prefix": "SetModels",
    "body": "SetModels(${1:boolean showModels=false})$0",
    "description": "(Client) Method: DFileBrowser:SetModels\n\nEnables or disables the model viewer mode. In this mode, files are displayed as SpawnIcons instead of a list."
  },
  "DFileBrowser:SetName": {
    "prefix": "SetName",
    "body": "SetName(${1:string treeName=''baseFolder''})$0",
    "description": "(Client) Method: DFileBrowser:SetName\n\nSets the name to use for the file tree."
  },
  "DFileBrowser:SetSearch": {
    "prefix": "SetSearch",
    "body": "SetSearch(${1:string filter=\"*\"})$0",
    "description": "(Client) Method: DFileBrowser:SetSearch\n\nSets the search filter for the file tree."
  },
  "DFileBrowser:Setup": {
    "prefix": "Setup",
    "body": "Setup()$0",
    "description": "(Client) Method: DFileBrowser:Setup\n\n[Internal]  Called to set up the DTree and file viewer when a base path has been set."
  },
  "DFileBrowser:SetupTree": {
    "prefix": "SetupTree",
    "body": "SetupTree()$0",
    "description": "(Client) Method: DFileBrowser:SetupTree\n\n[Internal]  Called to set up the DListView or Type.DIconBrowser by DFileBrowser.Setup."
  },
  "DFileBrowser:ShowFolder": {
    "prefix": "ShowFolder",
    "body": "ShowFolder(${1:string currentDir})$0",
    "description": "(Client) Method: DFileBrowser:ShowFolder\n\n[Internal] Builds the file or icon list for the current directory."
  },
  "DFileBrowser:SortFiles": {
    "prefix": "SortFiles",
    "body": "SortFiles(${1:boolean descending=false})$0",
    "description": "(Client) Method: DFileBrowser:SortFiles\n\nSorts the file list."
  },
  "DForm:AddItem": {
    "prefix": "AddItem",
    "body": "AddItem(${1:Panel left}, ${2:Panel right})$0",
    "description": "(Client) Method: DForm:AddItem\n\nAdds one or two items to the DForm."
  },
  "DForm:Button": {
    "prefix": "Button",
    "body": "Button(${1:string text}, ${2:string concmd}, ${3:vararg concmd args})$0",
    "description": "(Client) Method: DForm:Button\n\nAdds a DButton onto the Type.DForm"
  },
  "DForm:CheckBox": {
    "prefix": "CheckBox",
    "body": "CheckBox(${1:string label}, ${2:string convar})$0",
    "description": "(Client) Method: DForm:CheckBox\n\nAdds a DCheckBoxLabel onto the Type.DForm"
  },
  "DForm:Clear": {
    "prefix": "Clear",
    "body": "Clear()$0",
    "description": "(Client) Method: DForm:Clear\n\nClears all items from the DForm"
  },
  "DForm:ComboBox": {
    "prefix": "ComboBox",
    "body": "ComboBox(${1:string title}, ${2:string convar})$0",
    "description": "(Client) Method: DForm:ComboBox\n\nAdds a DComboBox onto the Type.DForm"
  },
  "DForm:ControlHelp": {
    "prefix": "ControlHelp",
    "body": "ControlHelp(${1:string help})$0",
    "description": "(Client) Method: DForm:ControlHelp\n\nAdds a DLabel onto the Type.DForm. Unlike DForm.Help, this is indented and is colored blue, depending on the derma skin."
  },
  "DForm:Help": {
    "prefix": "Help",
    "body": "Help(${1:string help})$0",
    "description": "(Client) Method: DForm:Help\n\nAdds a DLabel onto the Type.DForm as a helper"
  },
  "DForm:ListBox": {
    "prefix": "ListBox",
    "body": "ListBox(${1:string label})$0",
    "description": "(Client) Method: DForm:ListBox\n\nAdds a DListBox onto the Type.DForm"
  },
  "DForm:NumberWang": {
    "prefix": "NumberWang",
    "body": "NumberWang(${1:string label}, ${2:string convar}, ${3:number min}, ${4:number max}, ${5:number decimals=nil})$0",
    "description": "(Client) Method: DForm:NumberWang\n\nAdds a DNumberWang onto the Type.DForm"
  },
  "DForm:NumSlider": {
    "prefix": "NumSlider",
    "body": "NumSlider(${1:string label}, ${2:string convar}, ${3:number min}, ${4:number max}, ${5:number decimals=nil})$0",
    "description": "(Client) Method: DForm:NumSlider\n\nAdds a DNumSlider onto the Type.DForm"
  },
  "DForm:PanelSelect": {
    "prefix": "PanelSelect",
    "body": "PanelSelect()$0",
    "description": "(Client) Method: DForm:PanelSelect\n\nCreates a DPanelSelect and docks it to the top of the DForm."
  },
  "DForm:SetName": {
    "prefix": "SetName",
    "body": "SetName(${1:string name})$0",
    "description": "(Client) Method: DForm:SetName\n\nSets the title (header) name of the DForm. This is ''Label'' until set."
  },
  "DForm:TextEntry": {
    "prefix": "TextEntry",
    "body": "TextEntry(${1:string label}, ${2:string convar})$0",
    "description": "(Client) Method: DForm:TextEntry\n\nAdds a DTextEntry to a Type.DForm"
  },
  "DFrame:Center": {
    "prefix": "Center",
    "body": "Center()$0",
    "description": "(Client) Method: DFrame:Center\n\nCenters the frame relative to the whole screen and invalidates its layout. This overrides Panel.Center."
  },
  "DFrame:Close": {
    "prefix": "Close",
    "body": "Close()$0",
    "description": "(Client) Method: DFrame:Close\n\nHides or removes the DFrame, and calls DFrame.OnClose."
  },
  "DFrame:GetBackgroundBlur": {
    "prefix": "GetBackgroundBlur",
    "body": "GetBackgroundBlur()$0",
    "description": "(Client) Method: DFrame:GetBackgroundBlur\n\nGets whether the background behind the frame is being blurred."
  },
  "DFrame:GetDeleteOnClose": {
    "prefix": "GetDeleteOnClose",
    "body": "GetDeleteOnClose()$0",
    "description": "(Client) Method: DFrame:GetDeleteOnClose\n\nDetermines whether or not the DFrame will be removed when it is closed. This is set with DFrame.SetDeleteOnClose."
  },
  "DFrame:GetDraggable": {
    "prefix": "GetDraggable",
    "body": "GetDraggable()$0",
    "description": "(Client) Method: DFrame:GetDraggable\n\nGets whether or not the frame is draggable by the user."
  },
  "DFrame:GetIsMenu": {
    "prefix": "GetIsMenu",
    "body": "GetIsMenu()$0",
    "description": "(Client) Method: DFrame:GetIsMenu\n\nGets whether or not the frame is part of a derma menu. This is set with DFrame.SetIsMenu."
  },
  "DFrame:GetMinHeight": {
    "prefix": "GetMinHeight",
    "body": "GetMinHeight()$0",
    "description": "(Client) Method: DFrame:GetMinHeight\n\nGets the minimum height the DFrame can be resized to by the user."
  },
  "DFrame:GetMinWidth": {
    "prefix": "GetMinWidth",
    "body": "GetMinWidth()$0",
    "description": "(Client) Method: DFrame:GetMinWidth\n\nGets the minimum width the DFrame can be resized to by the user."
  },
  "DFrame:GetPaintShadow": {
    "prefix": "GetPaintShadow",
    "body": "GetPaintShadow()$0",
    "description": "(Client) Method: DFrame:GetPaintShadow\n\nGets whether or not the shadow effect bordering the DFrame is being drawn."
  },
  "DFrame:GetScreenLock": {
    "prefix": "GetScreenLock",
    "body": "GetScreenLock()$0",
    "description": "(Client) Method: DFrame:GetScreenLock\n\nGets whether or not the DFrame is restricted to the boundaries of the screen resolution."
  },
  "DFrame:GetSizable": {
    "prefix": "GetSizable",
    "body": "GetSizable()$0",
    "description": "(Client) Method: DFrame:GetSizable\n\nGets whether or not the DFrame can be resized by the user."
  },
  "DFrame:IsActive": {
    "prefix": "IsActive",
    "body": "IsActive()$0",
    "description": "(Client) Method: DFrame:IsActive\n\nDetermines if the frame or one of its children has the screen focus."
  },
  "DFrame:OnClose": {
    "prefix": "OnClose",
    "body": "OnClose()$0",
    "description": "(Client) Method: DFrame:OnClose\n\nCalled when the DFrame is closed with DFrame.Close. This applies when the ''close'' button in the DFrame's control box is clicked."
  },
  "DFrame:SetBackgroundBlur": {
    "prefix": "SetBackgroundBlur",
    "body": "SetBackgroundBlur(${1:boolean blur})$0",
    "description": "(Client) Method: DFrame:SetBackgroundBlur\n\nBlurs background behind the frame."
  },
  "DFrame:SetDeleteOnClose": {
    "prefix": "SetDeleteOnClose",
    "body": "SetDeleteOnClose(${1:boolean shouldDelete})$0",
    "description": "(Client) Method: DFrame:SetDeleteOnClose\n\nDetermines whether or not the DFrame is removed when it is closed with DFrame.Close."
  },
  "DFrame:SetDraggable": {
    "prefix": "SetDraggable",
    "body": "SetDraggable(${1:boolean draggable})$0",
    "description": "(Client) Method: DFrame:SetDraggable\n\nSets whether the frame should be draggable by the user. The DFrame can only be dragged from its title bar."
  },
  "DFrame:SetIsMenu": {
    "prefix": "SetIsMenu",
    "body": "SetIsMenu(${1:boolean isMenu})$0",
    "description": "(Client) Method: DFrame:SetIsMenu\n\nSets whether the frame is part of a derma menu or not."
  },
  "DFrame:SetMinHeight": {
    "prefix": "SetMinHeight",
    "body": "SetMinHeight(${1:number minH})$0",
    "description": "(Client) Method: DFrame:SetMinHeight\n\nSets the minimum height the DFrame can be resized to by the user."
  },
  "DFrame:SetMinWidth": {
    "prefix": "SetMinWidth",
    "body": "SetMinWidth(${1:number minW})$0",
    "description": "(Client) Method: DFrame:SetMinWidth\n\nSets the minimum width the DFrame can be resized to by the user."
  },
  "DFrame:SetPaintShadow": {
    "prefix": "SetPaintShadow",
    "body": "SetPaintShadow(${1:boolean shouldPaint})$0",
    "description": "(Client) Method: DFrame:SetPaintShadow\n\nSets whether or not the shadow effect bordering the DFrame should be drawn."
  },
  "DFrame:SetScreenLock": {
    "prefix": "SetScreenLock",
    "body": "SetScreenLock(${1:boolean lock})$0",
    "description": "(Client) Method: DFrame:SetScreenLock\n\nSets whether the DFrame is restricted to the boundaries of the screen resolution."
  },
  "DFrame:SetSizable": {
    "prefix": "SetSizable",
    "body": "SetSizable(${1:boolean sizeable})$0",
    "description": "(Client) Method: DFrame:SetSizable\n\nSets whether or not the DFrame can be resized by the user."
  },
  "DFrame:SetTitle": {
    "prefix": "SetTitle",
    "body": "SetTitle(${1:string title})$0",
    "description": "(Client) Method: DFrame:SetTitle\n\nSets the title of the frame."
  },
  "DFrame:ShowCloseButton": {
    "prefix": "ShowCloseButton",
    "body": "ShowCloseButton(${1:boolean show})$0",
    "description": "(Client) Method: DFrame:ShowCloseButton\n\nDetermines whether the DFrame's control box (close, minimise and maximise buttons) is displayed."
  },
  "DHTML:AddFunction": {
    "prefix": "AddFunction",
    "body": "AddFunction(${1:string library}, ${2:string name}, ${3:function callback})$0",
    "description": "(Client) Method: DHTML:AddFunction\n\nDefines a Javascript function that when called will call a Lua callback."
  },
  "DHTML:Call": {
    "prefix": "Call",
    "body": "Call(${1:string js})$0",
    "description": "(Client) Method: DHTML:Call\n\nRuns/Executes a string as JavaScript code."
  },
  "DHTML:ConsoleMessage": {
    "prefix": "ConsoleMessage",
    "body": "ConsoleMessage(${1:string msg})$0",
    "description": "(Client) Method: DHTML:ConsoleMessage\n\nCalled when the page inside the DHTML window runs ''console.log''. This can also be called within the Lua environment to emulate ''console.log''. If the contained message begins with ''RUNLUA:'' the following text will be executed as code within the Lua environment (this is how Lua is called from DHTML windows)."
  },
  "DHTML:GetAllowLua": {
    "prefix": "GetAllowLua",
    "body": "GetAllowLua()$0",
    "description": "(Client) Method: DHTML:GetAllowLua\n\nReturns if the loaded page can run Lua code, set by DHTML.SetAllowLua"
  },
  "DHTML:QueueJavascript": {
    "prefix": "QueueJavascript",
    "body": "QueueJavascript(${1:string js})$0",
    "description": "(Client) Method: DHTML:QueueJavascript\n\nRuns/Executes a string as JavaScript code."
  },
  "DHTML:SetAllowLua": {
    "prefix": "SetAllowLua",
    "body": "SetAllowLua(${1:boolean allow=false})$0",
    "description": "(Client) Method: DHTML:SetAllowLua\n\nDetermines whether the loaded page can run Lua code or not. See DHTML for how to run Lua from a DHTML window."
  },
  "DHTML:SetScrollbars": {
    "prefix": "SetScrollbars",
    "body": "SetScrollbars(${1:boolean show})$0",
    "description": "(Client) Method: DHTML:SetScrollbars\n\n[Deprecated] .Broken. Use the CSS ''overflow'' rule instead. Sets if the loaded window should display scrollbars when the webpage is larger than the viewing window. This is similar to the CSS ''overflow'' rule."
  },
  "DHTML:StopLoading": {
    "prefix": "StopLoading",
    "body": "StopLoading()$0",
    "description": "(Client) Method: DHTML:StopLoading\n\nStops the loading of the HTML panel's current page."
  },
  "DIconLayout:Copy": {
    "prefix": "Copy",
    "body": "Copy()$0",
    "description": "(Client) Method: DIconLayout:Copy\n\nCreates a replica of the DIconLayout it is called on."
  },
  "DIconLayout:CopyContents": {
    "prefix": "CopyContents",
    "body": "CopyContents(${1:Panel from})$0",
    "description": "(Client) Method: DIconLayout:CopyContents\n\nCopies the contents of the DIconLayout, including the children."
  },
  "DIconLayout:GetBorder": {
    "prefix": "GetBorder",
    "body": "GetBorder()$0",
    "description": "(Client) Method: DIconLayout:GetBorder\n\nReturns the size of the border."
  },
  "DIconLayout:GetLayoutDir": {
    "prefix": "GetLayoutDir",
    "body": "GetLayoutDir()$0",
    "description": "(Client) Method: DIconLayout:GetLayoutDir\n\nReturns the direction that it will be layed out, using the DOCK enumerations."
  },
  "DIconLayout:GetSpaceX": {
    "prefix": "GetSpaceX",
    "body": "GetSpaceX()$0",
    "description": "(Client) Method: DIconLayout:GetSpaceX\n\nReturns the distance between two 'icons' on the X axis."
  },
  "DIconLayout:GetSpaceY": {
    "prefix": "GetSpaceY",
    "body": "GetSpaceY()$0",
    "description": "(Client) Method: DIconLayout:GetSpaceY\n\nReturns distance between two \"Icons\" on the Y axis."
  },
  "DIconLayout:Layout": {
    "prefix": "Layout",
    "body": "Layout()$0",
    "description": "(Client) Method: DIconLayout:Layout\n\nResets layout vars before calling Panel.InvalidateLayout. This is called when children are added or removed, and must be called when the spacing, border or layout direction is changed."
  },
  "DIconLayout:OnModified": {
    "prefix": "OnModified",
    "body": "OnModified()$0",
    "description": "(Client) Method: DIconLayout:OnModified\n\nCalled when the panel is modified."
  },
  "DIconLayout:SetBorder": {
    "prefix": "SetBorder",
    "body": "SetBorder(${1:number width})$0",
    "description": "(Client) Method: DIconLayout:SetBorder\n\nSets the internal border (padding) within the DIconLayout. This will not change its size, only the positioning of children. You must call DIconLayout.Layout in order for the changes to take effect."
  },
  "DIconLayout:SetLayoutDir": {
    "prefix": "SetLayoutDir",
    "body": "SetLayoutDir(${1:number Direction})$0",
    "description": "(Client) Method: DIconLayout:SetLayoutDir\n\nSets the direction that it will be layed out, using the DOCK enumerations."
  },
  "DIconLayout:SetSpaceX": {
    "prefix": "SetSpaceX",
    "body": "SetSpaceX(${1:number xSpacing})$0",
    "description": "(Client) Method: DIconLayout:SetSpaceX\n\nSets the horizontal (x) spacing between children within the DIconLayout. You must call DIconLayout.Layout in order for the changes to take effect."
  },
  "DIconLayout:SetSpaceY": {
    "prefix": "SetSpaceY",
    "body": "SetSpaceY(${1:number ySpacing})$0",
    "description": "(Client) Method: DIconLayout:SetSpaceY\n\nSets the vertical (y) spacing between children within the DIconLayout. You must call DIconLayout.Layout in order for the changes to take effect."
  },
  "DImage:DoLoadMaterial": {
    "prefix": "DoLoadMaterial",
    "body": "DoLoadMaterial()$0",
    "description": "(Client) Method: DImage:DoLoadMaterial\n\n[Internal] "
  },
  "DImage:FixVertexLitMaterial": {
    "prefix": "FixVertexLitMaterial",
    "body": "FixVertexLitMaterial()$0",
    "description": "(Client) Method: DImage:FixVertexLitMaterial\n\n[Internal] "
  },
  "DImage:GetFailsafeMatName": {
    "prefix": "GetFailsafeMatName",
    "body": "GetFailsafeMatName()$0",
    "description": "(Client) Method: DImage:GetFailsafeMatName\n\n[Internal] "
  },
  "DImage:GetImage": {
    "prefix": "GetImage",
    "body": "GetImage()$0",
    "description": "(Client) Method: DImage:GetImage\n\nReturns the image loaded in the image panel."
  },
  "DImage:GetImageColor": {
    "prefix": "GetImageColor",
    "body": "GetImageColor()$0",
    "description": "(Client) Method: DImage:GetImageColor\n\nReturns the color override of the image panel."
  },
  "DImage:GetKeepAspect": {
    "prefix": "GetKeepAspect",
    "body": "GetKeepAspect()$0",
    "description": "(Client) Method: DImage:GetKeepAspect\n\nReturns whether the DImage should keep the aspect ratio of its image when being resized."
  },
  "DImage:GetMaterial": {
    "prefix": "GetMaterial",
    "body": "GetMaterial()$0",
    "description": "(Client) Method: DImage:GetMaterial\n\nReturns the current _G.Material of the DImage."
  },
  "DImage:GetMatName": {
    "prefix": "GetMatName",
    "body": "GetMatName()$0",
    "description": "(Client) Method: DImage:GetMatName\n\n[Internal] "
  },
  "DImage:LoadMaterial": {
    "prefix": "LoadMaterial",
    "body": "LoadMaterial()$0",
    "description": "(Client) Method: DImage:LoadMaterial\n\n[Internal] "
  },
  "DImage:PaintAt": {
    "prefix": "PaintAt",
    "body": "PaintAt(${1:number posX}, ${2:number posY}, ${3:number width}, ${4:number height})$0",
    "description": "(Client) Method: DImage:PaintAt\n\nPaints a ghost copy of the DImage panel at the given position and dimensions. This function overrides Panel.PaintAt."
  },
  "DImage:SetFailsafeMatName": {
    "prefix": "SetFailsafeMatName",
    "body": "SetFailsafeMatName(${1:string backupMat})$0",
    "description": "(Client) Method: DImage:SetFailsafeMatName\n\n[Internal] "
  },
  "DImage:SetImage": {
    "prefix": "SetImage",
    "body": "SetImage(${1:string strImage}, ${2:string strBackup})$0",
    "description": "(Client) Method: DImage:SetImage\n\nSets the image to load into the frame. If the first image can't be loaded and ''strBackup'' is set, that image will be loaded instead."
  },
  "DImage:SetImageColor": {
    "prefix": "SetImageColor",
    "body": "SetImageColor(${1:table col})$0",
    "description": "(Client) Method: DImage:SetImageColor\n\nSets the image's color override."
  },
  "DImage:SetKeepAspect": {
    "prefix": "SetKeepAspect",
    "body": "SetKeepAspect(${1:boolean keep})$0",
    "description": "(Client) Method: DImage:SetKeepAspect\n\nSets whether the DImage should keep the aspect ratio of its image when being resized."
  },
  "DImage:SetMaterial": {
    "prefix": "SetMaterial",
    "body": "SetMaterial(${1:IMaterial mat})$0",
    "description": "(Client) Method: DImage:SetMaterial\n\nSets a _G.Material directly as an image."
  },
  "DImage:SetMatName": {
    "prefix": "SetMatName",
    "body": "SetMatName(${1:string mat})$0",
    "description": "(Client) Method: DImage:SetMatName\n\n[Internal] "
  },
  "DImage:SetOnViewMaterial": {
    "prefix": "SetOnViewMaterial",
    "body": "SetOnViewMaterial(${1:string mat}, ${2:string backupMat})$0",
    "description": "(Client) Method: DImage:SetOnViewMaterial\n\nSimilar to DImage.SetImage, but will only do the expensive part of actually loading the textures/material if the material is about to be rendered/viewed."
  },
  "DImage:Unloaded": {
    "prefix": "Unloaded",
    "body": "Unloaded()$0",
    "description": "(Client) Method: DImage:Unloaded\n\nReturns true if the image is '''not''' yet loaded."
  },
  "DImageButton:GetImage": {
    "prefix": "GetImage",
    "body": "GetImage()$0",
    "description": "(Client) Method: DImageButton:GetImage\n\nReturns the \"image\" of the DImageButton. Equivalent of DImage.GetImage."
  },
  "DImageButton:GetStretchToFit": {
    "prefix": "GetStretchToFit",
    "body": "GetStretchToFit()$0",
    "description": "(Client) Method: DImageButton:GetStretchToFit\n\nReturns whether the image inside the button should be stretched to fit it or not"
  },
  "DImageButton:SetColor": {
    "prefix": "SetColor",
    "body": "SetColor(${1:table color})$0",
    "description": "(Client) Method: DImageButton:SetColor\n\nSets the color of the image. Equivalent of DImage.SetImageColor"
  },
  "DImageButton:SetIcon": {
    "prefix": "SetIcon",
    "body": "SetIcon()$0",
    "description": "(Client) Method: DImageButton:SetIcon\n\n[Deprecated] "
  },
  "DImageButton:SetImage": {
    "prefix": "SetImage",
    "body": "SetImage(${1:string strImage}, ${2:string strBackup})$0",
    "description": "(Client) Method: DImageButton:SetImage\n\nSets the \"image\" of the DImageButton. Equivalent of DImage.SetImage."
  },
  "DImageButton:SetImageVisible": {
    "prefix": "SetImageVisible",
    "body": "SetImageVisible(${1:boolean visible})$0",
    "description": "(Client) Method: DImageButton:SetImageVisible\n\nHides or shows the image of the image button. Internally this calls Panel.SetVisible on the internal DImage."
  },
  "DImageButton:SetKeepAspect": {
    "prefix": "SetKeepAspect",
    "body": "SetKeepAspect(${1:boolean keep})$0",
    "description": "(Client) Method: DImageButton:SetKeepAspect\n\nSets whether the DImageButton should keep the aspect ratio of its image. Equivalent of DImage.SetKeepAspect."
  },
  "DImageButton:SetMaterial": {
    "prefix": "SetMaterial",
    "body": "SetMaterial(${1:IMaterial mat})$0",
    "description": "(Client) Method: DImageButton:SetMaterial\n\nSets a _G.Material directly as an image. Equivalent of DImage.SetMaterial."
  },
  "DImageButton:SetOnViewMaterial": {
    "prefix": "SetOnViewMaterial",
    "body": "SetOnViewMaterial(${1:string mat}, ${2:string backup})$0",
    "description": "(Client) Method: DImageButton:SetOnViewMaterial\n\nSee DImage.SetOnViewMaterial"
  },
  "DImageButton:SetStretchToFit": {
    "prefix": "SetStretchToFit",
    "body": "SetStretchToFit(${1:boolean stretch})$0",
    "description": "(Client) Method: DImageButton:SetStretchToFit\n\nSets whether the image inside the DImageButton should be stretched to fill the entire size of the button, without preserving aspect ratio."
  },
  "DKillIcon:GetName": {
    "prefix": "GetName",
    "body": "GetName()$0",
    "description": "(Client) Method: DKillIcon:GetName\n\nGets the killicon being shown."
  },
  "DKillIcon:SetName": {
    "prefix": "SetName",
    "body": "SetName(${1:string iconName})$0",
    "description": "(Client) Method: DKillIcon:SetName\n\nSets the killicon to be displayed. You should call DKillIcon.SizeToContents following this."
  },
  "DKillIcon:SizeToContents": {
    "prefix": "SizeToContents",
    "body": "SizeToContents()$0",
    "description": "(Client) Method: DKillIcon:SizeToContents\n\nResizes the DKillIcon to fit the icon currently being shown. You should call this after DKillIcon.SetName."
  },
  "DLabel:DoClick": {
    "prefix": "DoClick",
    "body": "DoClick()$0",
    "description": "(Client) Method: DLabel:DoClick\n\n[[Category:DButton]] Called when the label is clicked by a user."
  },
  "DLabel:DoRightClick": {
    "prefix": "DoRightClick",
    "body": "DoRightClick()$0",
    "description": "(Client) Method: DLabel:DoRightClick\n\n[[Category:DLabel]] Called when the label is right clicked by a user."
  },
  "DLabel:GetDisabled": {
    "prefix": "GetDisabled",
    "body": "GetDisabled()$0",
    "description": "(Client) Method: DLabel:GetDisabled\n\n[[Category:DButton]] Gets the disabled state of the DLabel. This is set with DLabel.SetDisabled."
  },
  "DLabel:GetFont": {
    "prefix": "GetFont",
    "body": "GetFont()$0",
    "description": "(Client) Method: DLabel:GetFont\n\n[[Category:DButton]] Returns the current font of the DLabel. This is set with DLabel.SetFont."
  },
  "DLabel:GetIsToggle": {
    "prefix": "GetIsToggle",
    "body": "GetIsToggle()$0",
    "description": "(Client) Method: DLabel:GetIsToggle\n\nReturns whether the toggle functionality is enabled for a label. Set with DLabel.SetIsToggle."
  },
  "DLabel:GetToggle": {
    "prefix": "GetToggle",
    "body": "GetToggle()$0",
    "description": "(Client) Method: DLabel:GetToggle\n\nReturns the current toggle state of the label. This can be set with DLabel.SetToggle and toggled with DLabel.Toggle."
  },
  "DLabel:OnToggled": {
    "prefix": "OnToggled",
    "body": "OnToggled(${1:boolean toggleState})$0",
    "description": "(Client) Method: DLabel:OnToggled\n\nCalled when the toggle state of the label is changed by DLabel.Toggle."
  },
  "DLabel:SetAutoStretchVertical": {
    "prefix": "SetAutoStretchVertical",
    "body": "SetAutoStretchVertical(${1:boolean stretch})$0",
    "description": "(Client) Method: DLabel:SetAutoStretchVertical\n\nAutomatically adjusts the height of the label dependent of the height of the text inside of it."
  },
  "DLabel:SetBright": {
    "prefix": "SetBright",
    "body": "SetBright(${1:boolean bright})$0",
    "description": "(Client) Method: DLabel:SetBright\n\nSets the color of the text to the bright text color defined in the skin."
  },
  "DLabel:SetColor": {
    "prefix": "SetColor",
    "body": "SetColor(${1:table color})$0",
    "description": "(Client) Method: DLabel:SetColor\n\nChanges color of label. Alias of DLabel.SetTextColor."
  },
  "DLabel:SetDark": {
    "prefix": "SetDark",
    "body": "SetDark(${1:boolean dark})$0",
    "description": "(Client) Method: DLabel:SetDark\n\nSets the color of the text to the dark text color defined in the skin."
  },
  "DLabel:SetDisabled": {
    "prefix": "SetDisabled",
    "body": "SetDisabled(${1:boolean disable})$0",
    "description": "(Client) Method: DLabel:SetDisabled\n\nSets the disabled state of the DLabel."
  },
  "DLabel:SetFont": {
    "prefix": "SetFont",
    "body": "SetFont(${1:string fontName})$0",
    "description": "(Client) Method: DLabel:SetFont\n\n[[Category:DButton]] Sets the font of the label."
  },
  "DLabel:SetIsToggle": {
    "prefix": "SetIsToggle",
    "body": "SetIsToggle(${1:boolean allowToggle})$0",
    "description": "(Client) Method: DLabel:SetIsToggle\n\nEnables or disables toggle functionality for a label. Retrieved with DLabel.GetIsToggle."
  },
  "DLabel:SetText": {
    "prefix": "SetText",
    "body": "SetText(${1:string text})$0",
    "description": "(Client) Method: DLabel:SetText\n\nSet the Text of the DLabel VGUI element."
  },
  "DLabel:SetTextColor": {
    "prefix": "SetTextColor",
    "body": "SetTextColor(${1:table color})$0",
    "description": "(Client) Method: DLabel:SetTextColor\n\nSets the text color for the DLabel."
  },
  "DLabel:SetToggle": {
    "prefix": "SetToggle",
    "body": "SetToggle(${1:boolean toggleState})$0",
    "description": "(Client) Method: DLabel:SetToggle\n\nSets the toggle state of the label. This can be retrieved with DLabel.GetToggle and toggled with DLabel.Toggle."
  },
  "DLabel:Toggle": {
    "prefix": "Toggle",
    "body": "Toggle()$0",
    "description": "(Client) Method: DLabel:Toggle\n\nToggles the label's state. This can be set and retrieved with DLabel.SetToggle and DLabel.GetToggle."
  },
  "DLabel:UpdateColors": {
    "prefix": "UpdateColors",
    "body": "UpdateColors(${1:table skin})$0",
    "description": "(Client) Method: DLabel:UpdateColors\n\nA hook called from within DLabel.ApplySchemeSettings to determine the color of the text on display."
  },
  "DLabelURL:GetColor": {
    "prefix": "GetColor",
    "body": "GetColor()$0",
    "description": "(Client) Method: DLabelURL:GetColor\n\nGets the current text color of the DLabelURL. Same as DLabelURL.GetTextColor."
  },
  "DLabelURL:GetTextColor": {
    "prefix": "GetTextColor",
    "body": "GetTextColor()$0",
    "description": "(Client) Method: DLabelURL:GetTextColor\n\nGets the current text color of the DLabelURL. Same as DLabelURL.GetColor."
  },
  "DLabelURL:SetColor": {
    "prefix": "SetColor",
    "body": "SetColor(${1:table col})$0",
    "description": "(Client) Method: DLabelURL:SetColor\n\nAlias of DLabelURL.SetTextColor."
  },
  "DLabelURL:SetTextColor": {
    "prefix": "SetTextColor",
    "body": "SetTextColor(${1:table col})$0",
    "description": "(Client) Method: DLabelURL:SetTextColor\n\nSets the text color of the DLabelURL. This should only be used immediately after it is created, and otherwise Panel.SetFGColor."
  },
  "DListLayout:OnModified": {
    "prefix": "OnModified",
    "body": "OnModified()$0",
    "description": "(Client) Method: DListLayout:OnModified\n\nCalled when anything is dropped on or rearranged within the DListLayout. You should override this."
  },
  "DListView_Column:SetTextAlign": {
    "prefix": "SetTextAlign",
    "body": "SetTextAlign(${1:number alignment})$0",
    "description": "(Client) Method: DListView_Column:SetTextAlign\n\nSets the text alignment for the column"
  },
  "DListView_Line:GetColumnText": {
    "prefix": "GetColumnText",
    "body": "GetColumnText(${1:number column})$0",
    "description": "(Client) Method: DListView_Line:GetColumnText\n\nGets the string held in the specified column of a DListView_Line panel."
  },
  "DListView:AddColumn": {
    "prefix": "AddColumn",
    "body": "AddColumn(${1:string column}, ${2:string material}, ${3:number position})$0",
    "description": "(Client) Method: DListView:AddColumn\n\nAdds a column to the listview."
  },
  "DListView:AddLine": {
    "prefix": "AddLine",
    "body": "AddLine(${1:vararg text})$0",
    "description": "(Client) Method: DListView:AddLine\n\nAdds a line to the list view."
  },
  "DListView:Clear": {
    "prefix": "Clear",
    "body": "Clear()$0",
    "description": "(Client) Method: DListView:Clear\n\nRemoves all lines that have been added to the DListView."
  },
  "DListView:ClearSelection": {
    "prefix": "ClearSelection",
    "body": "ClearSelection()$0",
    "description": "(Client) Method: DListView:ClearSelection\n\nClears the current selection in the DListView."
  },
  "DListView:ColumnWidth": {
    "prefix": "ColumnWidth",
    "body": "ColumnWidth(${1:number column})$0",
    "description": "(Client) Method: DListView:ColumnWidth\n\nGets the width of a column."
  },
  "DListView:DataLayout": {
    "prefix": "DataLayout",
    "body": "DataLayout()$0",
    "description": "(Client) Method: DListView:DataLayout\n\nCreates the lines and gets the height of the contents, in a DListView."
  },
  "DListView:DisableScrollbar": {
    "prefix": "DisableScrollbar",
    "body": "DisableScrollbar()$0",
    "description": "(Client) Method: DListView:DisableScrollbar\n\nRemoves the scrollbar."
  },
  "DListView:DoDoubleClick": {
    "prefix": "DoDoubleClick",
    "body": "DoDoubleClick(${1:number lineID}, ${2:Panel line})$0",
    "description": "(Client) Method: DListView:DoDoubleClick\n\nCalled when a line in the DListView is double clicked."
  },
  "DListView:FixColumnsLayout": {
    "prefix": "FixColumnsLayout",
    "body": "FixColumnsLayout()$0",
    "description": "(Client) Method: DListView:FixColumnsLayout\n\n[Internal] "
  },
  "DListView:GetCanvas": {
    "prefix": "GetCanvas",
    "body": "GetCanvas()$0",
    "description": "(Client) Method: DListView:GetCanvas\n\nGets the canvas."
  },
  "DListView:GetDataHeight": {
    "prefix": "GetDataHeight",
    "body": "GetDataHeight()$0",
    "description": "(Client) Method: DListView:GetDataHeight\n\nReturns the height of the data of the DListView."
  },
  "DListView:GetDirty": {
    "prefix": "GetDirty",
    "body": "GetDirty()$0",
    "description": "(Client) Method: DListView:GetDirty\n\n[Internal] "
  },
  "DListView:GetHeaderHeight": {
    "prefix": "GetHeaderHeight",
    "body": "GetHeaderHeight()$0",
    "description": "(Client) Method: DListView:GetHeaderHeight\n\nReturns the height of the header of the DListView."
  },
  "DListView:GetHideHeaders": {
    "prefix": "GetHideHeaders",
    "body": "GetHideHeaders()$0",
    "description": "(Client) Method: DListView:GetHideHeaders\n\nReturns whether the header line should be visible on not."
  },
  "DListView:GetInnerTall": {
    "prefix": "GetInnerTall",
    "body": "GetInnerTall()$0",
    "description": "(Client) Method: DListView:GetInnerTall\n\nReturns the height of DListView.GetCanvas."
  },
  "DListView:GetLine": {
    "prefix": "GetLine",
    "body": "GetLine(${1:number id})$0",
    "description": "(Client) Method: DListView:GetLine\n\nGets the DListView_Line at the given index."
  },
  "DListView:GetLines": {
    "prefix": "GetLines",
    "body": "GetLines()$0",
    "description": "(Client) Method: DListView:GetLines\n\nGets all of the lines added to the DListView."
  },
  "DListView:GetMultiSelect": {
    "prefix": "GetMultiSelect",
    "body": "GetMultiSelect()$0",
    "description": "(Client) Method: DListView:GetMultiSelect\n\nReturns whether multiple lines can be selected or not."
  },
  "DListView:GetSelected": {
    "prefix": "GetSelected",
    "body": "GetSelected()$0",
    "description": "(Client) Method: DListView:GetSelected\n\nGets all of the lines that are currently selected."
  },
  "DListView:GetSelectedLine": {
    "prefix": "GetSelectedLine",
    "body": "GetSelectedLine()$0",
    "description": "(Client) Method: DListView:GetSelectedLine\n\nGets the currently selected DListViewLine."
  },
  "DListView:GetSortable": {
    "prefix": "GetSortable",
    "body": "GetSortable()$0",
    "description": "(Client) Method: DListView:GetSortable\n\nReturns whether sorting of columns by clicking their headers is allowed or not."
  },
  "DListView:GetSortedID": {
    "prefix": "GetSortedID",
    "body": "GetSortedID(${1:number lineId})$0",
    "description": "(Client) Method: DListView:GetSortedID\n\n[Internal] "
  },
  "DListView:OnClickLine": {
    "prefix": "OnClickLine",
    "body": "OnClickLine(${1:Panel line}, ${2:boolean isSelected})$0",
    "description": "(Client) Method: DListView:OnClickLine\n\n[Internal] .Use DListView.OnRowSelected instead!"
  },
  "DListView:OnRequestResize": {
    "prefix": "OnRequestResize",
    "body": "OnRequestResize(${1:Panel column}, ${2:number size})$0",
    "description": "(Client) Method: DListView:OnRequestResize\n\n[Internal] "
  },
  "DListView:RemoveLine": {
    "prefix": "RemoveLine",
    "body": "RemoveLine(${1:number line})$0",
    "description": "(Client) Method: DListView:RemoveLine\n\nRemoves a line from the list view."
  },
  "DListView:SelectFirstItem": {
    "prefix": "SelectFirstItem",
    "body": "SelectFirstItem()$0",
    "description": "(Client) Method: DListView:SelectFirstItem\n\nSelects the line at the first index of the DListView if one has been added."
  },
  "DListView:SelectItem": {
    "prefix": "SelectItem",
    "body": "SelectItem(${1:Panel Line})$0",
    "description": "(Client) Method: DListView:SelectItem\n\nSelects a line in the listview."
  },
  "DListView:SetDataHeight": {
    "prefix": "SetDataHeight",
    "body": "SetDataHeight(${1:number height})$0",
    "description": "(Client) Method: DListView:SetDataHeight\n\nSets the height of all lines of the DListView except for the header line."
  },
  "DListView:SetDirty": {
    "prefix": "SetDirty",
    "body": "SetDirty(${1:boolean isDirty})$0",
    "description": "(Client) Method: DListView:SetDirty\n\n[Internal] "
  },
  "DListView:SetHeaderHeight": {
    "prefix": "SetHeaderHeight",
    "body": "SetHeaderHeight(${1:number height})$0",
    "description": "(Client) Method: DListView:SetHeaderHeight\n\nSets the height of the header line of the DListView."
  },
  "DListView:SetHideHeaders": {
    "prefix": "SetHideHeaders",
    "body": "SetHideHeaders(${1:boolean hide})$0",
    "description": "(Client) Method: DListView:SetHideHeaders\n\nSets whether the header line should be visible on not."
  },
  "DListView:SetMultiSelect": {
    "prefix": "SetMultiSelect",
    "body": "SetMultiSelect(${1:boolean allowMultiSelect})$0",
    "description": "(Client) Method: DListView:SetMultiSelect\n\nSets whether multiple lines can be selected by the user by using the Key.Ctrl or Key.Shift keys. When set to false, only one line can be selected."
  },
  "DListView:SetSortable": {
    "prefix": "SetSortable",
    "body": "SetSortable(${1:boolean isSortable})$0",
    "description": "(Client) Method: DListView:SetSortable\n\nEnables/disables the sorting of columns by clicking."
  },
  "DListView:SortByColumn": {
    "prefix": "SortByColumn",
    "body": "SortByColumn(${1:number columnIndex}, ${2:boolean descending=false})$0",
    "description": "(Client) Method: DListView:SortByColumn\n\nSorts the items in the specified column."
  },
  "DListView:SortByColumns": {
    "prefix": "SortByColumns",
    "body": "SortByColumns(${1:number column1=nil}, ${2:boolean descrending1=false}, ${3:number column2=nil}, ${4:boolean descrending2=false}, ${5:number column3=nil}, ${6:boolean descrending3=false}, ${7:number column4=nil}, ${8:boolean descrending4=false})$0",
    "description": "(Client) Method: DListView:SortByColumns\n\nSorts the list based on given columns."
  },
  "DMenu:AddOption": {
    "prefix": "AddOption",
    "body": "AddOption(${1:string name}, ${2:function func=nil})$0",
    "description": "(Client) Method: DMenu:AddOption\n\nAdd an option to the DMenu"
  },
  "DMenu:AddSpacer": {
    "prefix": "AddSpacer",
    "body": "AddSpacer()$0",
    "description": "(Client) Method: DMenu:AddSpacer\n\nAdds a horizontal line spacer."
  },
  "DMenu:AddSubMenu": {
    "prefix": "AddSubMenu",
    "body": "AddSubMenu(${1:string Name}, ${2:function func=nil})$0",
    "description": "(Client) Method: DMenu:AddSubMenu\n\nAdd a sub menu to the DMenu"
  },
  "DMenu:GetChild": {
    "prefix": "GetChild",
    "body": "GetChild(${1:number childIndex})$0",
    "description": "(Client) Method: DMenu:GetChild\n\nGets a child by its index."
  },
  "DMenu:Open": {
    "prefix": "Open",
    "body": "Open(${1:number x=gui.MouseX()}, ${2:number y=gui.MouseY()}, ${3:any skipanimation}, ${4:Panel ownerpanel})$0",
    "description": "(Client) Method: DMenu:Open\n\nOpens the DMenu at the current mouse position"
  },
  "DMenuBar:AddMenu": {
    "prefix": "AddMenu",
    "body": "AddMenu(${1:string label})$0",
    "description": "(Client) Method: DMenuBar:AddMenu\n\nCreates a new DMenu object tied to a Type.DButton with the given label on the menu bar."
  },
  "DMenuBar:AddOrGetMenu": {
    "prefix": "AddOrGetMenu",
    "body": "AddOrGetMenu(${1:string label})$0",
    "description": "(Client) Method: DMenuBar:AddOrGetMenu\n\nRetrieves a DMenu object from the menu bar. If one with the given label doesn't exist, a new one is created."
  },
  "DMenuBar:GetBackgroundColor": {
    "prefix": "GetBackgroundColor",
    "body": "GetBackgroundColor()$0",
    "description": "(Client) Method: DMenuBar:GetBackgroundColor\n\nReturns the DMenuBar's background color"
  },
  "DMenuBar:GetDisabled": {
    "prefix": "GetDisabled",
    "body": "GetDisabled()$0",
    "description": "(Client) Method: DMenuBar:GetDisabled\n\nReturns whether or not the DMenuBar is disabled"
  },
  "DMenuBar:GetDrawBackground": {
    "prefix": "GetDrawBackground",
    "body": "GetDrawBackground()$0",
    "description": "(Client) Method: DMenuBar:GetDrawBackground\n\nReturns whether or not the background should be painted. Is the same as DMenuBar.GetPaintBackground"
  },
  "DMenuBar:GetIsMenu": {
    "prefix": "GetIsMenu",
    "body": "GetIsMenu()$0",
    "description": "(Client) Method: DMenuBar:GetIsMenu\n\nReturns whether or not the panel is a menu. Used for closing menus when another panel is selected."
  },
  "DMenuBar:GetOpenMenu": {
    "prefix": "GetOpenMenu",
    "body": "GetOpenMenu()$0",
    "description": "(Client) Method: DMenuBar:GetOpenMenu\n\nIf a menu is visible/opened, then the menu is returned."
  },
  "DMenuBar:GetPaintBackground": {
    "prefix": "GetPaintBackground",
    "body": "GetPaintBackground()$0",
    "description": "(Client) Method: DMenuBar:GetPaintBackground\n\nReturns whether or not the background should be painted. Is the same as DMenuBar.GetDrawBackground"
  },
  "DMenuBar:SetBackgroundColor": {
    "prefix": "SetBackgroundColor",
    "body": "SetBackgroundColor(${1:table color})$0",
    "description": "(Client) Method: DMenuBar:SetBackgroundColor\n\nSets the background color"
  },
  "DMenuBar:SetDisabled": {
    "prefix": "SetDisabled",
    "body": "SetDisabled(${1:boolean disable})$0",
    "description": "(Client) Method: DMenuBar:SetDisabled\n\nSets whether or not the panel is disabled"
  },
  "DMenuBar:SetDrawBackground": {
    "prefix": "SetDrawBackground",
    "body": "SetDrawBackground(${1:boolean shouldPaint})$0",
    "description": "(Client) Method: DMenuBar:SetDrawBackground\n\nSets whether or not the background should be painted. Is the same as DMenuBar.SetPaintBackground"
  },
  "DMenuBar:SetIsMenu": {
    "prefix": "SetIsMenu",
    "body": "SetIsMenu(${1:boolean isMenu})$0",
    "description": "(Client) Method: DMenuBar:SetIsMenu\n\nSets whether or not the panel is a menu. Used for closing menus when another panel is selected."
  },
  "DMenuBar:SetPaintBackground": {
    "prefix": "SetPaintBackground",
    "body": "SetPaintBackground(${1:boolean shouldPaint})$0",
    "description": "(Client) Method: DMenuBar:SetPaintBackground\n\nSets whether or not the background should be painted. Is the same as DMenuBar.SetDrawBackground"
  },
  "DModelPanel:DrawModel": {
    "prefix": "DrawModel",
    "body": "DrawModel()$0",
    "description": "(Client) Method: DModelPanel:DrawModel\n\n[Internal]  Used by the DModelPanel's paint hook to draw the model and background."
  },
  "DModelPanel:GetAmbientLight": {
    "prefix": "GetAmbientLight",
    "body": "GetAmbientLight()$0",
    "description": "(Client) Method: DModelPanel:GetAmbientLight\n\nReturns the ambient lighting used on the rendered entity."
  },
  "DModelPanel:GetAnimated": {
    "prefix": "GetAnimated",
    "body": "GetAnimated()$0",
    "description": "(Client) Method: DModelPanel:GetAnimated\n\nReturns whether or not the panel entity should be animated when the default DModelPanel.LayoutEntity function is called."
  },
  "DModelPanel:GetAnimSpeed": {
    "prefix": "GetAnimSpeed",
    "body": "GetAnimSpeed()$0",
    "description": "(Client) Method: DModelPanel:GetAnimSpeed\n\nReturns the animation speed of the panel entity, see DModelPanel.SetAnimSpeed."
  },
  "DModelPanel:GetCamPos": {
    "prefix": "GetCamPos",
    "body": "GetCamPos()$0",
    "description": "(Client) Method: DModelPanel:GetCamPos\n\nReturns the position of the model viewing camera."
  },
  "DModelPanel:GetColor": {
    "prefix": "GetColor",
    "body": "GetColor()$0",
    "description": "(Client) Method: DModelPanel:GetColor\n\nReturns the color of the rendered entity."
  },
  "DModelPanel:GetEntity": {
    "prefix": "GetEntity",
    "body": "GetEntity()$0",
    "description": "(Client) Method: DModelPanel:GetEntity\n\nReturns the entity being rendered by the model panel."
  },
  "DModelPanel:GetFOV": {
    "prefix": "GetFOV",
    "body": "GetFOV()$0",
    "description": "(Client) Method: DModelPanel:GetFOV\n\nReturns the FOV (field of view) the camera is using."
  },
  "DModelPanel:GetLookAng": {
    "prefix": "GetLookAng",
    "body": "GetLookAng()$0",
    "description": "(Client) Method: DModelPanel:GetLookAng\n\nReturns the angles of the model viewing camera. Is '''nil''' until changed with DModelPanel.SetLookAng."
  },
  "DModelPanel:GetLookAt": {
    "prefix": "GetLookAt",
    "body": "GetLookAt()$0",
    "description": "(Client) Method: DModelPanel:GetLookAt\n\nReturns the position the viewing camera is pointing toward."
  },
  "DModelPanel:GetModel": {
    "prefix": "GetModel",
    "body": "GetModel()$0",
    "description": "(Client) Method: DModelPanel:GetModel\n\nGets the model of the rendered entity."
  },
  "DModelPanel:LayoutEntity": {
    "prefix": "LayoutEntity",
    "body": "LayoutEntity(${1:Entity entity})$0",
    "description": "(Client) Method: DModelPanel:LayoutEntity\n\n[Internal]  By default, this function slowly rotates and animates the entity being rendered."
  },
  "DModelPanel:PostDrawModel": {
    "prefix": "PostDrawModel",
    "body": "PostDrawModel(${1:Entity ent})$0",
    "description": "(Client) Method: DModelPanel:PostDrawModel\n\nCalled when the entity of the DModelPanel was drawn."
  },
  "DModelPanel:PreDrawModel": {
    "prefix": "PreDrawModel",
    "body": "PreDrawModel(${1:Entity ent})$0",
    "description": "(Client) Method: DModelPanel:PreDrawModel\n\nCalled '''before''' the entity of the DModelPanel is drawn."
  },
  "DModelPanel:RunAnimation": {
    "prefix": "RunAnimation",
    "body": "RunAnimation()$0",
    "description": "(Client) Method: DModelPanel:RunAnimation\n\nThis function is used in the '''DModelPanel:LayoutEntity'''. It will set the active model to the last set animation using Entity.SetSequence. By default, it is the walking animation."
  },
  "DModelPanel:SetAmbientLight": {
    "prefix": "SetAmbientLight",
    "body": "SetAmbientLight(${1:table color})$0",
    "description": "(Client) Method: DModelPanel:SetAmbientLight\n\nSets the ambient lighting used on the rendered entity."
  },
  "DModelPanel:SetAnimated": {
    "prefix": "SetAnimated",
    "body": "SetAnimated(${1:boolean animated})$0",
    "description": "(Client) Method: DModelPanel:SetAnimated\n\nSets whether or not to animate the entity when the default DModelPanel.LayoutEntity is called."
  },
  "DModelPanel:SetAnimSpeed": {
    "prefix": "SetAnimSpeed",
    "body": "SetAnimSpeed(${1:number animSpeed})$0",
    "description": "(Client) Method: DModelPanel:SetAnimSpeed\n\nSets the speed used by DModelPanel.RunAnimation to advance frame on an entity sequence."
  },
  "DModelPanel:SetCamPos": {
    "prefix": "SetCamPos",
    "body": "SetCamPos(${1:Vector pos})$0",
    "description": "(Client) Method: DModelPanel:SetCamPos\n\nSets the position of the camera."
  },
  "DModelPanel:SetColor": {
    "prefix": "SetColor",
    "body": "SetColor(${1:table color})$0",
    "description": "(Client) Method: DModelPanel:SetColor\n\nSets the color of the rendered entity."
  },
  "DModelPanel:SetDirectionalLight": {
    "prefix": "SetDirectionalLight",
    "body": "SetDirectionalLight(${1:number direction}, ${2:table color})$0",
    "description": "(Client) Method: DModelPanel:SetDirectionalLight\n\nSets the directional lighting used on the rendered entity."
  },
  "DModelPanel:SetEntity": {
    "prefix": "SetEntity",
    "body": "SetEntity(${1:Entity ent})$0",
    "description": "(Client) Method: DModelPanel:SetEntity\n\nSets the entity to be rendered by the model panel."
  },
  "DModelPanel:SetFOV": {
    "prefix": "SetFOV",
    "body": "SetFOV(${1:number fov})$0",
    "description": "(Client) Method: DModelPanel:SetFOV\n\nSets the panel camera's FOV (field of view)."
  },
  "DModelPanel:SetLookAng": {
    "prefix": "SetLookAng",
    "body": "SetLookAng(${1:Angle ang})$0",
    "description": "(Client) Method: DModelPanel:SetLookAng\n\nSets the angles of the camera."
  },
  "DModelPanel:SetLookAt": {
    "prefix": "SetLookAt",
    "body": "SetLookAt(${1:Vector pos})$0",
    "description": "(Client) Method: DModelPanel:SetLookAt\n\nMakes the panel's camera face the given position."
  },
  "DModelPanel:SetModel": {
    "prefix": "SetModel",
    "body": "SetModel(${1:string model})$0",
    "description": "(Client) Method: DModelPanel:SetModel\n\n"
  },
  "DModelSelect:SetModelList": {
    "prefix": "SetModelList",
    "body": "SetModelList(${1:table Models}, ${2:string ConVar}, ${3:boolean DontSort}, ${4:boolean DontCallListConVars})$0",
    "description": "(Client) Method: DModelSelect:SetModelList\n\nCalled to set the list of models within the panel element."
  },
  "DNotify:GetLife": {
    "prefix": "GetLife",
    "body": "GetLife()$0",
    "description": "(Client) Method: DNotify:GetLife\n\nReturns the display time in seconds of the DNotify. This is set with "
  },
  "DNotify:SetLife": {
    "prefix": "SetLife",
    "body": "SetLife(${1:number time})$0",
    "description": "(Client) Method: DNotify:SetLife\n\nSets the display time in seconds for the DNotify."
  },
  "DNumberWang:GetFraction": {
    "prefix": "GetFraction",
    "body": "GetFraction(${1:number val})$0",
    "description": "(Client) Method: DNumberWang:GetFraction\n\nReturns a fraction representing the current number selector value to number selector min/max range ratio. If argument ''val'' is supplied, that number will be computed instead."
  },
  "DNumberWang:GetValue": {
    "prefix": "GetValue",
    "body": "GetValue()$0",
    "description": "(Client) Method: DNumberWang:GetValue\n\nReturns the numeric value inside the number selector."
  },
  "DNumberWang:HideWang": {
    "prefix": "HideWang",
    "body": "HideWang()$0",
    "description": "(Client) Method: DNumberWang:HideWang\n\nHides the number selector arrows."
  },
  "DNumberWang:OnValueChanged": {
    "prefix": "OnValueChanged",
    "body": "OnValueChanged(${1:number val})$0",
    "description": "(Client) Method: DNumberWang:OnValueChanged\n\nInternal function which is called when the number selector value is changed. This function is empty by default so it needs to be overridden in order to provide functionality. "
  },
  "DNumberWang:SetDecimals": {
    "prefix": "SetDecimals",
    "body": "SetDecimals(${1:number num})$0",
    "description": "(Client) Method: DNumberWang:SetDecimals\n\nSets the amount of decimal places allowed in the number selector."
  },
  "DNumberWang:SetFraction": {
    "prefix": "SetFraction",
    "body": "SetFraction(${1:number val})$0",
    "description": "(Client) Method: DNumberWang:SetFraction\n\nSets the value of the number selector based on the given fraction number."
  },
  "DNumberWang:SetMax": {
    "prefix": "SetMax",
    "body": "SetMax(${1:number max})$0",
    "description": "(Client) Method: DNumberWang:SetMax\n\nSets the maximum numeric value allowed by the number selector."
  },
  "DNumberWang:SetMin": {
    "prefix": "SetMin",
    "body": "SetMin(${1:number min})$0",
    "description": "(Client) Method: DNumberWang:SetMin\n\nSets the minimum numeric value allowed by the number selector."
  },
  "DNumberWang:SetMinMax": {
    "prefix": "SetMinMax",
    "body": "SetMinMax(${1:number min}, ${2:number max})$0",
    "description": "(Client) Method: DNumberWang:SetMinMax\n\nSets the minimum and maximum value allowed by the number selector."
  },
  "DNumSlider:OnValueChanged": {
    "prefix": "OnValueChanged",
    "body": "OnValueChanged(${1:number value})$0",
    "description": "(Client) Method: DNumSlider:OnValueChanged\n\nCalled when the value of the slider is changed, through code or changing the slider."
  },
  "DNumSlider:SetMin": {
    "prefix": "SetMin",
    "body": "SetMin(${1:number min})$0",
    "description": "(Client) Method: DNumSlider:SetMin\n\nSets the minimum value for the slider"
  },
  "DSlider:ValueChanged": {
    "prefix": "ValueChanged",
    "body": "ValueChanged(${1:number value})$0",
    "description": "(Client) Method: DSlider:ValueChanged\n\n[Internal]  Called when the value has been changed. This will also be called when the user manually changes the value through the text panel."
  },
  "DPanel:GetBackgroundColor": {
    "prefix": "GetBackgroundColor",
    "body": "GetBackgroundColor()$0",
    "description": "(Client) Method: DPanel:GetBackgroundColor\n\nReturns the panel's background color."
  },
  "DPanel:GetDisabled": {
    "prefix": "GetDisabled",
    "body": "GetDisabled()$0",
    "description": "(Client) Method: DPanel:GetDisabled\n\nReturns whether or not the panel is disabled."
  },
  "DPanel:GetDrawBackground": {
    "prefix": "GetDrawBackground",
    "body": "GetDrawBackground()$0",
    "description": "(Client) Method: DPanel:GetDrawBackground\n\n[Deprecated] .You should use DPanel.GetPaintBackground instead.Returns whether or not the panel background is being drawn. Alias of DPanel.GetPaintBackground."
  },
  "DPanel:GetPaintBackground": {
    "prefix": "GetPaintBackground",
    "body": "GetPaintBackground()$0",
    "description": "(Client) Method: DPanel:GetPaintBackground\n\nReturns whether or not the panel background is being drawn."
  },
  "DPanel:SetBackgroundColor": {
    "prefix": "SetBackgroundColor",
    "body": "SetBackgroundColor(${1:table color})$0",
    "description": "(Client) Method: DPanel:SetBackgroundColor\n\nSets the background color of the panel."
  },
  "DPanel:SetDisabled": {
    "prefix": "SetDisabled",
    "body": "SetDisabled(${1:boolean disabled})$0",
    "description": "(Client) Method: DPanel:SetDisabled\n\nSets whether or not to disable the panel."
  },
  "DPanel:SetDrawBackground": {
    "prefix": "SetDrawBackground",
    "body": "SetDrawBackground(${1:boolean draw})$0",
    "description": "(Client) Method: DPanel:SetDrawBackground\n\n[Deprecated] .You should use DPanel.SetPaintBackground instead.Sets whether or not to draw the panel background. Alias of DPanel.SetPaintBackground."
  },
  "DPanel:SetPaintBackground": {
    "prefix": "SetPaintBackground",
    "body": "SetPaintBackground(${1:boolean paint})$0",
    "description": "(Client) Method: DPanel:SetPaintBackground\n\nSets whether or not to paint/draw the panel background."
  },
  "DProgress:GetFraction": {
    "prefix": "GetFraction",
    "body": "GetFraction()$0",
    "description": "(Client) Method: DProgress:GetFraction\n\nReturns the progress bar's fraction. 0 is 0% and 1 is 100%."
  },
  "DProgress:SetFraction": {
    "prefix": "SetFraction",
    "body": "SetFraction(${1:number fraction})$0",
    "description": "(Client) Method: DProgress:SetFraction\n\nSets the fraction of the progress bar. 0 is 0% and 1 is 100%."
  },
  "DProperties:CreateRow": {
    "prefix": "CreateRow",
    "body": "CreateRow(${1:string category}, ${2:string name})$0",
    "description": "(Client) Method: DProperties:CreateRow\n\nCreates a row in the properties panel."
  },
  "DProperty_Combo:AddChoice": {
    "prefix": "AddChoice",
    "body": "AddChoice(${1:string Text}, ${2:any data}, ${3:boolean select=false})$0",
    "description": "(Client) Method: DProperty_Combo:AddChoice\n\nAdd a choice to your combo control."
  },
  "DProperty_Combo:DataChanged": {
    "prefix": "DataChanged",
    "body": "DataChanged(${1:any data})$0",
    "description": "(Client) Method: DProperty_Combo:DataChanged\n\nCalled after the user selects a new value."
  },
  "DProperty_Combo:SetSelected": {
    "prefix": "SetSelected",
    "body": "SetSelected(${1:number Id})$0",
    "description": "(Client) Method: DProperty_Combo:SetSelected\n\nSet the selected option."
  },
  "DProperty_Combo:Setup": {
    "prefix": "Setup",
    "body": "Setup(${1:string prop=\"Combo\"}, ${2:table data={ text = \"Select...\" }})$0",
    "description": "(Client) Method: DProperty_Combo:Setup\n\nSets up a combo control."
  },
  "DProperty_VectorColor:Setup": {
    "prefix": "Setup",
    "body": "Setup(${1:string =\"VectorColor\"}, ${2:table settings})$0",
    "description": "(Client) Method: DProperty_VectorColor:Setup\n\n[Internal]  Called by a property row to setup a color selection control."
  },
  "DProperty_VectorColor:SetValue": {
    "prefix": "SetValue",
    "body": "SetValue(${1:Vector color})$0",
    "description": "(Client) Method: DProperty_VectorColor:SetValue\n\nSets the color value of the property."
  },
  "DPropertySheet:AddSheet": {
    "prefix": "AddSheet",
    "body": "AddSheet(${1:string name}, ${2:Panel pnl}, ${3:string icon=nil}, ${4:boolean noStretchX=false}, ${5:boolean noStretchY=false}, ${6:string tooltip=nil})$0",
    "description": "(Client) Method: DPropertySheet:AddSheet\n\nAdds a new tab."
  },
  "DPropertySheet:CloseTab": {
    "prefix": "CloseTab",
    "body": "CloseTab(${1:Panel tab}, ${2:boolean removePanel})$0",
    "description": "(Client) Method: DPropertySheet:CloseTab\n\nRemoves tab and/or panel from the parent DPropertySheet."
  },
  "DPropertySheet:GetPadding": {
    "prefix": "GetPadding",
    "body": "GetPadding()$0",
    "description": "(Client) Method: DPropertySheet:GetPadding\n\nGets the padding from the parent panel to child panels."
  },
  "DPropertySheet:SetFadeTime": {
    "prefix": "SetFadeTime",
    "body": "SetFadeTime(${1:number time=0.1})$0",
    "description": "(Client) Method: DPropertySheet:SetFadeTime\n\nSets the amount of time (in seconds) it takes to fade between tabs."
  },
  "DPropertySheet:SetPadding": {
    "prefix": "SetPadding",
    "body": "SetPadding(${1:number padding=8})$0",
    "description": "(Client) Method: DPropertySheet:SetPadding\n\nSets the padding from parent panel to children panel."
  },
  "DRGBPicker:GetRGB": {
    "prefix": "GetRGB",
    "body": "GetRGB()$0",
    "description": "(Client) Method: DRGBPicker:GetRGB\n\nReturns the color currently set on the color picker."
  },
  "DRGBPicker:OnChange": {
    "prefix": "OnChange",
    "body": "OnChange(${1:table col})$0",
    "description": "(Client) Method: DRGBPicker:OnChange\n\nFunction which is called when the cursor is clicked and/or moved on the color picker. Meant to be overridden."
  },
  "DRGBPicker:SetRGB": {
    "prefix": "SetRGB",
    "body": "SetRGB(${1:table color})$0",
    "description": "(Client) Method: DRGBPicker:SetRGB\n\nSets the color stored in the color picker."
  },
  "DScrollPanel:AddItem": {
    "prefix": "AddItem",
    "body": "AddItem(${1:Panel pnl})$0",
    "description": "(Client) Method: DScrollPanel:AddItem\n\nParents the passed panel to the DScrollPanel's canvas."
  },
  "DScrollPanel:Clear": {
    "prefix": "Clear",
    "body": "Clear()$0",
    "description": "(Client) Method: DScrollPanel:Clear\n\nClears all childs from the DScrollPanel"
  },
  "DScrollPanel:GetCanvas": {
    "prefix": "GetCanvas",
    "body": "GetCanvas()$0",
    "description": "(Client) Method: DScrollPanel:GetCanvas\n\nReturns the canvas ( The panel all child panels are parented to ) of the DScrollPanel."
  },
  "DScrollPanel:GetPadding": {
    "prefix": "GetPadding",
    "body": "GetPadding()$0",
    "description": "(Client) Method: DScrollPanel:GetPadding\n\nGets the DScrollPanels padding"
  },
  "DScrollPanel:GetVBar": {
    "prefix": "GetVBar",
    "body": "GetVBar()$0",
    "description": "(Client) Method: DScrollPanel:GetVBar\n\nReturns the vertical scroll bar of the panel."
  },
  "DScrollPanel:InnerWidth": {
    "prefix": "InnerWidth",
    "body": "InnerWidth()$0",
    "description": "(Client) Method: DScrollPanel:InnerWidth\n\nReturn the width of the DScrollPanel's canvas."
  },
  "DScrollPanel:Rebuild": {
    "prefix": "Rebuild",
    "body": "Rebuild()$0",
    "description": "(Client) Method: DScrollPanel:Rebuild\n\n"
  },
  "DScrollPanel:ScrollToChild": {
    "prefix": "ScrollToChild",
    "body": "ScrollToChild(${1:Panel panel})$0",
    "description": "(Client) Method: DScrollPanel:ScrollToChild\n\nScrolls to the given child"
  },
  "DScrollPanel:SetCanvas": {
    "prefix": "SetCanvas",
    "body": "SetCanvas(${1:Panel canvas})$0",
    "description": "(Client) Method: DScrollPanel:SetCanvas\n\n[Internal] Sets the canvas of the DScrollPanel."
  },
  "DScrollPanel:SetPadding": {
    "prefix": "SetPadding",
    "body": "SetPadding(${1:number padding})$0",
    "description": "(Client) Method: DScrollPanel:SetPadding\n\nSets the DScrollPanel's padding. This function appears to be unused."
  },
  "DScrollPanel:SizeToContents": {
    "prefix": "SizeToContents",
    "body": "SizeToContents()$0",
    "description": "(Client) Method: DScrollPanel:SizeToContents\n\nSets the DScrollPanels size to the size of the contents"
  },
  "DShape:SetType": {
    "prefix": "SetType",
    "body": "SetType(${1:string type})$0",
    "description": "(Client) Method: DShape:SetType\n\nSets the shape to be drawn."
  },
  "DSprite:GetColor": {
    "prefix": "GetColor",
    "body": "GetColor()$0",
    "description": "(Client) Method: DSprite:GetColor\n\nGets the color the sprite is using as a modifier."
  },
  "DSprite:GetMaterial": {
    "prefix": "GetMaterial",
    "body": "GetMaterial()$0",
    "description": "(Client) Method: DSprite:GetMaterial\n\nGets the material the sprite is using."
  },
  "DSprite:GetRotation": {
    "prefix": "GetRotation",
    "body": "GetRotation()$0",
    "description": "(Client) Method: DSprite:GetRotation\n\nGets the 2D rotation angle of the sprite, in the plane of the screen."
  },
  "DSprite:SetColor": {
    "prefix": "SetColor",
    "body": "SetColor(${1:table color})$0",
    "description": "(Client) Method: DSprite:SetColor\n\nSets the color modifier for the sprite."
  },
  "DSprite:SetMaterial": {
    "prefix": "SetMaterial",
    "body": "SetMaterial(${1:IMaterial material})$0",
    "description": "(Client) Method: DSprite:SetMaterial\n\nSets the source material for the sprite."
  },
  "DSprite:SetRotation": {
    "prefix": "SetRotation",
    "body": "SetRotation(${1:number ang})$0",
    "description": "(Client) Method: DSprite:SetRotation\n\nSets the 2D rotation angle of the sprite, in the plane of the screen."
  },
  "DTextEntry:AllowInput": {
    "prefix": "AllowInput",
    "body": "AllowInput(${1:string char})$0",
    "description": "(Client) Method: DTextEntry:AllowInput\n\nCalled whenever the value of the panel has been updated (whether by user input or otherwise)."
  },
  "DTextEntry:CheckNumeric": {
    "prefix": "CheckNumeric",
    "body": "CheckNumeric(${1:string strValue})$0",
    "description": "(Client) Method: DTextEntry:CheckNumeric\n\nReturns whether a string is numeric or not."
  },
  "DTextEntry:GetCursorColor": {
    "prefix": "GetCursorColor",
    "body": "GetCursorColor()$0",
    "description": "(Client) Method: DTextEntry:GetCursorColor\n\nReturns the cursor color of a DTextEntry."
  },
  "DTextEntry:GetNumeric": {
    "prefix": "GetNumeric",
    "body": "GetNumeric()$0",
    "description": "(Client) Method: DTextEntry:GetNumeric\n\nReturns whether only numeric characters (123456789.-) can be entered into the DTextEntry."
  },
  "DTextEntry:GetTextColor": {
    "prefix": "GetTextColor",
    "body": "GetTextColor()$0",
    "description": "(Client) Method: DTextEntry:GetTextColor\n\nReturns the text color of a DTextEntry."
  },
  "DTextEntry:GetUpdateOnType": {
    "prefix": "GetUpdateOnType",
    "body": "GetUpdateOnType()$0",
    "description": "(Client) Method: DTextEntry:GetUpdateOnType\n\nReturns whether the DTextEntry is set to run DTextEntry.OnValueChange every time a character is typed or deleted or only when Enter is pressed."
  },
  "DTextEntry:IsEditing": {
    "prefix": "IsEditing",
    "body": "IsEditing()$0",
    "description": "(Client) Method: DTextEntry:IsEditing\n\nReturns whether this DTextEntry is being edited or not. (i.e. has focus)"
  },
  "DTextEntry:OnChange": {
    "prefix": "OnChange",
    "body": "OnChange()$0",
    "description": "(Client) Method: DTextEntry:OnChange\n\nCalled internally by DTextEntry.OnTextChanged when the user modifies the text in the DTextEntry."
  },
  "DTextEntry:OnEnter": {
    "prefix": "OnEnter",
    "body": "OnEnter()$0",
    "description": "(Client) Method: DTextEntry:OnEnter\n\nCalled whenever enter is pressed on a DTextEntry."
  },
  "DTextEntry:OnKeyCodeTyped": {
    "prefix": "OnKeyCodeTyped",
    "body": "OnKeyCodeTyped(${1:number keyCode})$0",
    "description": "(Client) Method: DTextEntry:OnKeyCodeTyped\n\nCalled whenever a valid character is typed while the text entry is focused."
  },
  "DTextEntry:OnTextChanged": {
    "prefix": "OnTextChanged",
    "body": "OnTextChanged(${1:boolean noMenuRemoval})$0",
    "description": "(Client) Method: DTextEntry:OnTextChanged\n\n[Internal] Called internally when the text inside the DTextEntry changes."
  },
  "DTextEntry:OnValueChange": {
    "prefix": "OnValueChange",
    "body": "OnValueChange(${1:string value})$0",
    "description": "(Client) Method: DTextEntry:OnValueChange\n\nCalled internally when the text in the DTextEntry changes."
  },
  "DTextEntry:SetDisabled": {
    "prefix": "SetDisabled",
    "body": "SetDisabled(${1:boolean disabled})$0",
    "description": "(Client) Method: DTextEntry:SetDisabled\n\n[Deprecated] .Use Panel.SetEnabled instead."
  },
  "DTextEntry:SetEditable": {
    "prefix": "SetEditable",
    "body": "SetEditable(${1:boolean enabled})$0",
    "description": "(Client) Method: DTextEntry:SetEditable\n\nDisables Input on a DTextEntry. This differs from DTextEntry.SetDisabled - SetEditable will not affect the appearance of the textbox."
  },
  "DTextEntry:SetFont": {
    "prefix": "SetFont",
    "body": "SetFont(${1:string font})$0",
    "description": "(Client) Method: DTextEntry:SetFont\n\nChanges the font of the DTextEntry."
  },
  "DTextEntry:SetNumeric": {
    "prefix": "SetNumeric",
    "body": "SetNumeric(${1:boolean numericOnly})$0",
    "description": "(Client) Method: DTextEntry:SetNumeric\n\nSets whether or not to decline non-numeric characters as input."
  },
  "DTextEntry:SetUpdateOnType": {
    "prefix": "SetUpdateOnType",
    "body": "SetUpdateOnType(${1:boolean updateOnType})$0",
    "description": "(Client) Method: DTextEntry:SetUpdateOnType\n\nSets whether we should fire DTextEntry.OnValueChange every time we type or delete a character or only when Enter is pressed."
  },
  "DTileLayout:ClearTiles": {
    "prefix": "ClearTiles",
    "body": "ClearTiles()$0",
    "description": "(Client) Method: DTileLayout:ClearTiles\n\n[Internal]  Clears the panel's tile table. Used by DTileLayout.LayoutTiles."
  },
  "DTileLayout:ConsumeTiles": {
    "prefix": "ConsumeTiles",
    "body": "ConsumeTiles(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})$0",
    "description": "(Client) Method: DTileLayout:ConsumeTiles\n\n[Internal]  Called to designate a range of tiles as occupied by a panel."
  },
  "DTileLayout:Copy": {
    "prefix": "Copy",
    "body": "Copy()$0",
    "description": "(Client) Method: DTileLayout:Copy\n\nCreates and returns an exact copy of the DTileLayout."
  },
  "DTileLayout:CopyContents": {
    "prefix": "CopyContents",
    "body": "CopyContents(${1:Panel source})$0",
    "description": "(Client) Method: DTileLayout:CopyContents\n\nCreates copies of all the children from the given panel object and parents them to this one."
  },
  "DTileLayout:FindFreeTile": {
    "prefix": "FindFreeTile",
    "body": "FindFreeTile(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})$0",
    "description": "(Client) Method: DTileLayout:FindFreeTile\n\n[Internal]  Finds the coordinates of the first group of free tiles that fit the given size."
  },
  "DTileLayout:FitsInTile": {
    "prefix": "FitsInTile",
    "body": "FitsInTile(${1:number x}, ${2:number y}, ${3:number w}, ${4:number h})$0",
    "description": "(Client) Method: DTileLayout:FitsInTile\n\n[Internal]  Determines if a group of tiles is vacant."
  },
  "DTileLayout:GetBaseSize": {
    "prefix": "GetBaseSize",
    "body": "GetBaseSize()$0",
    "description": "(Client) Method: DTileLayout:GetBaseSize\n\nReturns the size of each single tile, set with DTileLayout.SetBaseSize."
  },
  "DTileLayout:GetMinHeight": {
    "prefix": "GetMinHeight",
    "body": "GetMinHeight()$0",
    "description": "(Client) Method: DTileLayout:GetMinHeight\n\nReturns the minimum height the DTileLayout can resize to."
  },
  "DTileLayout:GetTile": {
    "prefix": "GetTile",
    "body": "GetTile(${1:number x}, ${2:number y})$0",
    "description": "(Client) Method: DTileLayout:GetTile\n\n[Internal]  Gets the occupied state of a tile."
  },
  "DTileLayout:Layout": {
    "prefix": "Layout",
    "body": "Layout()$0",
    "description": "(Client) Method: DTileLayout:Layout\n\nResets the last width/height info, and invalidates the panel's layout, causing it to recalculate all child positions. It is called whenever a child is added or removed, and can be called to refresh the panel."
  },
  "DTileLayout:LayoutTiles": {
    "prefix": "LayoutTiles",
    "body": "LayoutTiles()$0",
    "description": "(Client) Method: DTileLayout:LayoutTiles\n\n[Internal]  Called by PANEL.PerformLayout to arrange and lay out the child panels, if it has changed in size."
  },
  "DTileLayout:OnModified": {
    "prefix": "OnModified",
    "body": "OnModified()$0",
    "description": "(Client) Method: DTileLayout:OnModified\n\nCalled when anything is dropped on or rearranged within the DTileLayout. You should override this."
  },
  "DTileLayout:SetBaseSize": {
    "prefix": "SetBaseSize",
    "body": "SetBaseSize(${1:number size})$0",
    "description": "(Client) Method: DTileLayout:SetBaseSize\n\nSets the size of a single tile. If a child panel is larger than this size, it will occupy several tiles."
  },
  "DTileLayout:SetMinHeight": {
    "prefix": "SetMinHeight",
    "body": "SetMinHeight(${1:number minH})$0",
    "description": "(Client) Method: DTileLayout:SetMinHeight\n\nDetermines the minimum height the DTileLayout will resize to. This is useful if child panels will be added/removed often."
  },
  "DTileLayout:SetTile": {
    "prefix": "SetTile",
    "body": "SetTile(${1:number x}, ${2:number y}, ${3:any state})$0",
    "description": "(Client) Method: DTileLayout:SetTile\n\n[Internal]  Called to set the occupied state of a tile."
  },
  "DTooltip:DrawArrow": {
    "prefix": "DrawArrow",
    "body": "DrawArrow(${1:number x}, ${2:number y})$0",
    "description": "(Client) Method: DTooltip:DrawArrow\n\nUsed to draw a triangle beneath the DTooltip"
  },
  "DTooltip:PositionTooltip": {
    "prefix": "PositionTooltip",
    "body": "PositionTooltip()$0",
    "description": "(Client) Method: DTooltip:PositionTooltip\n\nPositions the DTooltip so it doesn't stay in the same draw position."
  },
  "DTooltip:SetContents": {
    "prefix": "SetContents",
    "body": "SetContents(${1:Panel })$0",
    "description": "(Client) Method: DTooltip:SetContents\n\nWhat Panel you want put inside of the DTooltip"
  },
  "DTree_Node:AddNode": {
    "prefix": "AddNode",
    "body": "AddNode(${1:string name}, ${2:string icon=\"icon16/folder.png\"})$0",
    "description": "(Client) Method: DTree_Node:AddNode\n\nAdd a child node to the DTree_Node"
  },
  "DTree_Node:GetText": {
    "prefix": "GetText",
    "body": "GetText()$0",
    "description": "(Client) Method: DTree_Node:GetText\n\nGets the text from the selected node"
  },
  "DTree:AddNode": {
    "prefix": "AddNode",
    "body": "AddNode(${1:string name}, ${2:string icon=\"icon16/folder.png\"})$0",
    "description": "(Client) Method: DTree:AddNode\n\nAdd a node to the DTree"
  },
  "DTree:GetIndentSize": {
    "prefix": "GetIndentSize",
    "body": "GetIndentSize()$0",
    "description": "(Client) Method: DTree:GetIndentSize\n\nGet the indent size of the DTree. Currently does nothing."
  },
  "DTree:GetSelectedItem": {
    "prefix": "GetSelectedItem",
    "body": "GetSelectedItem()$0",
    "description": "(Client) Method: DTree:GetSelectedItem\n\nReturns the currently selected node."
  },
  "DTree:GetShowIcons": {
    "prefix": "GetShowIcons",
    "body": "GetShowIcons()$0",
    "description": "(Client) Method: DTree:GetShowIcons\n\nReturns whether or not the [[Silkicons]] next to each node of the DTree will be displayed."
  },
  "DTree:OnNodeSelected": {
    "prefix": "OnNodeSelected",
    "body": "OnNodeSelected(${1:Panel node})$0",
    "description": "(Client) Method: DTree:OnNodeSelected\n\nThis function is called when a node within a tree is selected."
  },
  "DTree:Root": {
    "prefix": "Root",
    "body": "Root()$0",
    "description": "(Client) Method: DTree:Root\n\nReturns the root DTree_Node, the node that is the parent to all other nodes of the DTree."
  },
  "DTree:SetIndentSize": {
    "prefix": "SetIndentSize",
    "body": "SetIndentSize(${1:number size})$0",
    "description": "(Client) Method: DTree:SetIndentSize\n\nSet the indent size of the DTree. Currently does nothing."
  },
  "DTree:SetSelectedItem": {
    "prefix": "SetSelectedItem",
    "body": "SetSelectedItem(${1:Panel node})$0",
    "description": "(Client) Method: DTree:SetSelectedItem\n\nSet the currently selected top-level node."
  },
  "DTree:SetShowIcons": {
    "prefix": "SetShowIcons",
    "body": "SetShowIcons(${1:boolean show})$0",
    "description": "(Client) Method: DTree:SetShowIcons\n\nSets whether or not the [[Silkicons]] next to each node of the DTree will be displayed."
  },
  "DTree:ShowIcons": {
    "prefix": "ShowIcons",
    "body": "ShowIcons()$0",
    "description": "(Client) Method: DTree:ShowIcons\n\nReturns whether or not the [[Silkicons]] next to each node of the DTree will be displayed."
  },
  "IconEditor:AboveLayout": {
    "prefix": "AboveLayout",
    "body": "AboveLayout()$0",
    "description": "(Client) Method: IconEditor:AboveLayout\n\nApplies the top-down view camera settings for the model in the DAdjustableModelPanel."
  },
  "IconEditor:BestGuessLayout": {
    "prefix": "BestGuessLayout",
    "body": "BestGuessLayout()$0",
    "description": "(Client) Method: IconEditor:BestGuessLayout\n\nApplies the best camera settings for the model in the DAdjustableModelPanel, using the values returned by _G.PositionSpawnIcon."
  },
  "IconEditor:FillAnimations": {
    "prefix": "FillAnimations",
    "body": "FillAnimations(${1:Entity ent})$0",
    "description": "(Client) Method: IconEditor:FillAnimations\n\n[Internal]  Fills the DListView on the left of the editor with the model entity's animation list. Called by IconEditor.Refresh."
  },
  "IconEditor:FullFrontalLayout": {
    "prefix": "FullFrontalLayout",
    "body": "FullFrontalLayout()$0",
    "description": "(Client) Method: IconEditor:FullFrontalLayout\n\nApplies the front view camera settings for the model in the DAdjustableModelPanel."
  },
  "IconEditor:OriginLayout": {
    "prefix": "OriginLayout",
    "body": "OriginLayout()$0",
    "description": "(Client) Method: IconEditor:OriginLayout\n\nPlaces the camera at the origin (0,0,0), relative to the entity, in the DAdjustableModelPanel."
  },
  "IconEditor:Refresh": {
    "prefix": "Refresh",
    "body": "Refresh()$0",
    "description": "(Client) Method: IconEditor:Refresh\n\nUpdates the internal DAdjustableModelPanel and Type.SpawnIcon. "
  },
  "IconEditor:RenderIcon": {
    "prefix": "RenderIcon",
    "body": "RenderIcon()$0",
    "description": "(Client) Method: IconEditor:RenderIcon\n\nRe-renders the SpawnIcon."
  },
  "IconEditor:RightLayout": {
    "prefix": "RightLayout",
    "body": "RightLayout()$0",
    "description": "(Client) Method: IconEditor:RightLayout\n\nApplies the right side view camera settings for the model in the DAdjustableModelPanel."
  },
  "IconEditor:SetDefaultLighting": {
    "prefix": "SetDefaultLighting",
    "body": "SetDefaultLighting()$0",
    "description": "(Client) Method: IconEditor:SetDefaultLighting\n\n[Internal]  Sets up the default ambient and directional lighting for the DAdjustableModelPanel. Called by IconEditor.Refresh."
  },
  "IconEditor:SetFromEntity": {
    "prefix": "SetFromEntity",
    "body": "SetFromEntity(${1:Entity ent})$0",
    "description": "(Client) Method: IconEditor:SetFromEntity\n\nSets the editor's model and icon from an entity. Alternative to IconEditor.SetIcon, with uses a SpawnIcon."
  },
  "IconEditor:SetIcon": {
    "prefix": "SetIcon",
    "body": "SetIcon(${1:Panel icon})$0",
    "description": "(Client) Method: IconEditor:SetIcon\n\nSets the SpawnIcon to modify. You should call Panel.Refresh immediately after this, as the user will not be able to make changes to the icon beforehand."
  },
  "IconEditor:UpdateEntity": {
    "prefix": "UpdateEntity",
    "body": "UpdateEntity(${1:Entity ent})$0",
    "description": "(Client) Method: IconEditor:UpdateEntity\n\n[Internal]  Updates the entity being rendered in the internal DAdjustableModelPanel. Called by the model panel's DModelPanel.LayoutEntity method."
  },
  "Material:SetAlpha": {
    "prefix": "SetAlpha",
    "body": "SetAlpha(${1:number alpha})$0",
    "description": "(Client) Method: Material:SetAlpha\n\nSets the alpha value of the Material panel."
  }
}